{"mappings":"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","sources":["src/gpu/gpu.ts","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-de064808f50f0203.js","src/gpu/module.ts","node_modules/@parcel/runtime-js/lib/helpers/bundle-url.js","node_modules/@parcel/runtime-js/lib/runtime-d34ef996e88646b9.js","src/gpu/lines.ts","src/gpu/math.ts","src/gpu/position.ts","src/gpu/camera.ts","node_modules/@parcel/runtime-js/lib/runtime-de0ff28032311bfb.js","src/gpu/cloud.ts","node_modules/@parcel/runtime-js/lib/runtime-834efba60cf3efa7.js","src/gpu/kNearest.ts","node_modules/@parcel/runtime-js/lib/runtime-3d4494d9ab633712.js","node_modules/@parcel/runtime-js/lib/runtime-bd1c91b3dd208796.js","src/gpu/triangulate.ts","node_modules/@parcel/runtime-js/lib/runtime-4272d89a2f680092.js","node_modules/@parcel/runtime-js/lib/runtime-fe7dbc155dbeb07c.js","src/gpu/filter.ts","node_modules/@parcel/runtime-js/lib/runtime-8247f44db22fa3b5.js","src/gpu/edge.ts","node_modules/@parcel/runtime-js/lib/runtime-a966c07e5567cc5a.js","src/gpu/edgeOld.ts","src/loader/color.ts","src/loader/sphere.ts","src/loader/pcd.ts","src/loader/decompress.ts","node_modules/@parcel/runtime-js/lib/runtime-5c53c34f16fae00b.js","src/main.ts","node_modules/@parcel/runtime-js/lib/runtime-fa20b55da7e473e0.js","src/loader/grid.ts","src/loader/cube.ts"],"sourcesContent":["import { Camera } from './camera'\n\nlet adapter: GPUAdapter\nexport let device: GPUDevice\n\nexport const clearColor = { r: 0.0, g: 0.1, b: 0.2, a: 1.0 }\nexport let format: GPUTextureFormat\n\nlet canvas: HTMLCanvasElement\nlet context: GPUCanvasContext\n\nlet depth: GPUTexture\n\nexport let cameraBuffer: GPUBuffer\nexport let renderPass: GPURenderPassEncoder\nlet encoder: GPUCommandEncoder\n\nexport function aspect(): number {\n\treturn canvas.width / canvas.height\n}\n\nexport async function Setup(width: number, height: number): Promise<HTMLCanvasElement | undefined> {\n\tif (window.navigator.gpu == undefined) {\n\t\treturn undefined\n\t}\n\tadapter = await window.navigator.gpu.requestAdapter({\n\t\tpowerPreference: 'high-performance',\n\t})\n\tdevice = await adapter.requestDevice()\n\n\tcanvas = document.createElement('canvas')\n\tcontext = canvas.getContext('webgpu')\n\n\tformat = context.getPreferredFormat(adapter)\n\n\tResize(width, height)\n\n\treturn canvas\n}\n\nexport function Resize(width: number, height: number): void {\n\tcontext.configure({\n\t\tdevice: device,\n\t\tformat: format,\n\t\tsize:   { width: width, height: height },\n\t})\n\tcanvas.width = width\n\tcanvas.height = height\n\n\tdepth = device.createTexture({\n\t\tsize: {\n\t\t\twidth:  canvas.width,\n\t\t\theight: canvas.height,\n\t\t},\n\t\tformat: 'depth32float',\n\t\tusage:  GPUTextureUsage.RENDER_ATTACHMENT,\n\t})\n}\n\nexport function StartRender(camera: Camera): void {\n\tencoder = device.createCommandEncoder()\n\trenderPass = encoder.beginRenderPass({\n\t\tcolorAttachments: [\n\t\t\t{\n\t\t\t\tloadValue: clearColor,\n\t\t\t\tstoreOp:   'store',\n\t\t\t\tview:      context.getCurrentTexture().createView(),\n\t\t\t},\n\t\t],\n\t\tdepthStencilAttachment: {\n\t\t\tdepthLoadValue:   1.0,\n\t\t\tdepthStoreOp:     'store',\n\t\t\tstencilLoadValue: 0,\n\t\t\tstencilStoreOp:   'store',\n\t\t\tview:             depth.createView(),\n\t\t},\n\t})\n\tcameraBuffer = camera.Buffer()\n}\n\nexport function FinishRender(): void {\n\trenderPass.endPass()\n\tdevice.queue.submit([encoder.finish()])\n}\n\nexport function CreateBuffer(data: Float32Array | Uint32Array, usage: GPUFlagsConstant): GPUBuffer {\n\tconst buffer = device.createBuffer({\n\t\tsize:             data.byteLength,\n\t\tusage:            GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC | usage,\n\t\tmappedAtCreation: true,\n\t})\n\tnew Uint8Array(buffer.getMappedRange()).set(new Uint8Array(data.buffer))\n\tbuffer.unmap()\n\treturn buffer\n}\n\nexport function CreateEmptyBuffer(length: number, usage: GPUFlagsConstant): GPUBuffer {\n\tconst buffer = device.createBuffer({\n\t\tsize:             length,\n\t\tusage:            usage,\n\t\tmappedAtCreation: false,\n\t})\n\treturn buffer\n}\nexport async function ReadBuffer(buffer: GPUBuffer, size: number): Promise<ArrayBuffer> {\n\tconst temp = CreateEmptyBuffer(size, GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST)\n\t// Encode commands for copying buffer to buffer.\n\tconst copyEncoder = device.createCommandEncoder()\n\tcopyEncoder.copyBufferToBuffer(\n\t\tbuffer /* source buffer */,\n\t\t0 /* source offset */,\n\t\ttemp /* destination buffer */,\n\t\t0 /* destination offset */,\n\t\tsize /* size */,\n\t)\n\tconst copyCommands = copyEncoder.finish()\n\tdevice.queue.submit([copyCommands])\n\tawait temp.mapAsync(GPUMapMode.READ)\n\tconst copyArrayBuffer = temp.getMappedRange()\n\treturn copyArrayBuffer\n}\n","\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"kyWCV\\\":\\\"index.ccd019c7.js\\\",\\\"2JcDm\\\":\\\"lines.e69ace91.wgsl\\\",\\\"aEiTo\\\":\\\"cloud.50c7d6e3.wgsl\\\",\\\"inbDi\\\":\\\"kNearest.16925641.wgsl\\\",\\\"jPa00\\\":\\\"kNearest.51ef13fc.wgsl\\\",\\\"cCzGH\\\":\\\"triangulate.5f37e086.wgsl\\\",\\\"7cmWl\\\":\\\"triangle.3f88e9be.wgsl\\\",\\\"h5IBS\\\":\\\"filter.d736d268.wgsl\\\",\\\"ktFnt\\\":\\\"edge.a3b29df6.wgsl\\\",\\\"6miId\\\":\\\"edgeOld.36b7c09c.wgsl\\\",\\\"4cqXm\\\":\\\"bunny.0be1f493.pcd\\\",\\\"eGv1k\\\":\\\"rops_cloud.63cf8c5e.pcd\\\"}\"));","import * as GPU from './gpu'\n\nexport function New(src: string): GPUShaderModule {\n\tconst module = GPU.device.createShaderModule({\n\t\tcode: src,\n\t})\n\treturn module\n}\n","\"use strict\";\n\nvar bundleURL = {};\n\nfunction getBundleURLCached(id) {\n  var value = bundleURL[id];\n\n  if (!value) {\n    value = getBundleURL();\n    bundleURL[id] = value;\n  }\n\n  return value;\n}\n\nfunction getBundleURL() {\n  try {\n    throw new Error();\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp):\\/\\/[^)\\n]+/g);\n\n    if (matches) {\n      // The first two stack frames will be this function and getBundleURLCached.\n      // Use the 3rd one, which will be a runtime in the original bundle.\n      return getBaseURL(matches[2]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.\n\n\nfunction getOrigin(url) {\n  var matches = ('' + url).match(/(https?|file|ftp):\\/\\/[^/]+/);\n\n  if (!matches) {\n    throw new Error('Origin not found');\n  }\n\n  return matches[0];\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\nexports.getOrigin = getOrigin;","module.exports = require('./helpers/bundle-url').getBundleURL('kyWCV') + require('./helpers/bundle-manifest').resolve(\"2JcDm\");","import * as GPU from './gpu'\nimport * as Module from './module'\nimport { Position } from './position'\n\nconst linesURL = new URL('./render/lines.wgsl', import.meta.url)\n\nlet pipeline: GPURenderPipeline | undefined = undefined\n\nexport async function Render(\n\tposition: Position,\n\tlength: number,\n\tpositions: GPUBuffer,\n\tcolors: GPUBuffer,\n): Promise<void> {\n\tif (pipeline == undefined) {\n\t\tconst src = await (await fetch(linesURL.href)).text()\n\t\tconst module = Module.New(src)\n\n\t\tpipeline = GPU.device.createRenderPipeline({\n\t\t\tvertex: {\n\t\t\t\tmodule:     module,\n\t\t\t\tentryPoint: 'vertexMain',\n\t\t\t\tbuffers:    [\n\t\t\t\t\t{\n\t\t\t\t\t\tattributes: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tshaderLocation: 0,\n\t\t\t\t\t\t\t\toffset:         0 * 4,\n\t\t\t\t\t\t\t\tformat:         'float32x3',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tarrayStride: 4 * 4,\n\t\t\t\t\t\tstepMode:    'vertex',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tattributes: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tshaderLocation: 1,\n\t\t\t\t\t\t\t\toffset:         0 * 4,\n\t\t\t\t\t\t\t\tformat:         'float32x3',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tarrayStride: 4 * 4,\n\t\t\t\t\t\tstepMode:    'vertex',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\tfragment: {\n\t\t\t\tmodule:     module,\n\t\t\t\tentryPoint: 'fragmentMain',\n\t\t\t\ttargets:    [\n\t\t\t\t\t{\n\t\t\t\t\t\tformat: GPU.format,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\tdepthStencil: {\n\t\t\t\tformat:            'depth32float',\n\t\t\t\tdepthWriteEnabled: true,\n\t\t\t\tdepthCompare:      'less',\n\t\t\t},\n\t\t\tprimitive: {\n\t\t\t\ttopology: 'line-list',\n\t\t\t},\n\t\t})\n\t}\n\n\tconst array = new Float32Array(16)\n\tposition.Save(array, 0)\n\tconst buffer = GPU.CreateBuffer(array, GPUBufferUsage.UNIFORM)\n\tGPU.renderPass.setPipeline(pipeline)\n\tconst group = GPU.device.createBindGroup({\n\t\tlayout:  pipeline.getBindGroupLayout(0),\n\t\tentries: [\n\t\t\t{\n\t\t\t\tbinding:  0,\n\t\t\t\tresource: { buffer: GPU.cameraBuffer },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding:  1,\n\t\t\t\tresource: { buffer: buffer },\n\t\t\t},\n\t\t],\n\t})\n\tGPU.renderPass.setBindGroup(0, group)\n\tGPU.renderPass.setVertexBuffer(0, positions)\n\tGPU.renderPass.setVertexBuffer(1, colors)\n\tGPU.renderPass.draw(length)\n}\n","export class Matrix {\n\tprivate data: Float32Array\n\n\tprivate constructor(data: Float32Array) {\n\t\tthis.data = data\n\t}\n\n\tstatic Identity(): Matrix {\n\t\treturn new Matrix(\n\t\t\tnew Float32Array([\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, 1, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1,\n\t\t\t]),\n\t\t)\n\t}\n\n\tSave(location: Float32Array, offset: number): void {\n\t\tfor (let i = 0; i < 4; i++) {\n\t\t\tfor (let j = 0; j < 4; j++) {\n\t\t\t\tlocation[offset + i * 4 + j] = this.data[i + j * 4]\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic Translate(x: number, y: number, z: number): Matrix {\n\t\treturn new Matrix(\n\t\t\tnew Float32Array([\n\t\t\t\t/*eslint-disable*/\n\t\t\t\t1, 0, 0, x,\n\t\t\t\t0, 1, 0, y,\n\t\t\t\t0, 0, 1, z,\n\t\t\t\t0, 0, 0, 1\n\t\t\t\t/*eslint-enable*/\n\t\t\t]),\n\t\t)\n\t}\n\n\tstatic RotateX(rad: number): Matrix {\n\t\treturn new Matrix(\n\t\t\tnew Float32Array([\n\t\t\t\t/*eslint-disable*/\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, Math.cos(rad), -Math.sin(rad), 0,\n\t\t\t\t0, Math.sin(rad), Math.cos(rad), 0,\n\t\t\t\t0, 0, 0, 1,\n\t\t\t\t/*eslint-enable*/\n\t\t\t]),\n\t\t)\n\t}\n\n\tstatic Rotate(rad: number, axis: Vector): Matrix {\n\t\tconst sin = Math.sin(rad)\n\t\tconst cos = Math.cos(rad)\n\t\tconst cosN = 1 - cos\n\t\t//https://en.wikipedia.org/wiki/Rotation_matrix#Rotation_matrix_from_axis_and_angle\n\t\treturn new Matrix(\n\t\t\tnew Float32Array([\n\t\t\t\t/*eslint-disable*/\n\t\t\t\taxis.x*axis.x*cosN + cos,\n\t\t\t\taxis.x*axis.y*cosN - axis.z*sin,\n\t\t\t\taxis.x*axis.z*cosN + axis.y*sin,\n\t\t\t\t0,\n\n\t\t\t\taxis.y*axis.x*cosN + axis.z*sin,\n\t\t\t\taxis.y*axis.y*cosN + cos,\n\t\t\t\taxis.y*axis.z*cosN - axis.x*sin,\n\t\t\t\t0,\n\n\t\t\t\taxis.z*axis.x*cosN - axis.y*sin,\n\t\t\t\taxis.z*axis.y*cosN + axis.x*sin,\n\t\t\t\taxis.z*axis.z*cosN + cos,\n\t\t\t\t0,\n\n\t\t\t\t0, 0, 0, 1,\n\t\t\t\t/*eslint-enable*/\n\t\t\t]),\n\t\t)\n\t}\n\n\tstatic RotateY(rad: number): Matrix {\n\t\treturn new Matrix(\n\t\t\tnew Float32Array([\n\t\t\t\t/*eslint-disable*/\n\t\t\t\tMath.cos(rad), 0, Math.sin(rad), 0,\n\t\t\t\t0, 1, 0, 0,\n\t\t\t\t-Math.sin(rad), 0, Math.cos(rad), 0,\n\t\t\t\t0, 0, 0, 1,\n\t\t\t\t/*eslint-enable*/\n\t\t\t]),\n\t\t)\n\t}\n\n\tstatic RotateZ(rad: number): Matrix {\n\t\treturn new Matrix(\n\t\t\tnew Float32Array([\n\t\t\t\t/*eslint-disable*/\n\t\t\t\tMath.cos(rad), -Math.sin(rad), 0, 0,\n\t\t\t\tMath.sin(rad), Math.cos(rad), 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1,\n\t\t\t\t/*eslint-enable*/\n\t\t\t]),\n\t\t)\n\t}\n\n\tstatic Scale(x: number, y: number, z: number): Matrix {\n\t\treturn new Matrix(\n\t\t\tnew Float32Array([\n\t\t\t\t/*eslint-disable*/\n\t\t\t\tx, 0, 0, 0,\n\t\t\t\t0, y, 0, 0,\n\t\t\t\t0, 0, z, 0,\n\t\t\t\t0, 0, 0, 1,\n\t\t\t\t/*eslint-enable*/\n\t\t\t]),\n\t\t)\n\t}\n\n\tMultiply(m: Matrix): Matrix {\n\t\tconst res = new Float32Array(16)\n\t\tfor (let i = 0; i < 4; i++) {\n\t\t\tfor (let j = 0; j < 4; j++) {\n\t\t\t\tfor (let c = 0; c < 4; c++) {\n\t\t\t\t\tres[i + j * 4] += this.data[c + j * 4] * m.data[i + c * 4]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn new Matrix(res)\n\t}\n\n\tMultiplyVector(v: Vector): Vector {\n\t\treturn {\n\t\t\tx: this.data[0] * v.x + this.data[1] * v.y + this.data[2] * v.z,\n\t\t\ty: this.data[4] * v.x + this.data[5] * v.y + this.data[6] * v.z,\n\t\t\tz: this.data[8] * v.x + this.data[9] * v.y + this.data[10] * v.z,\n\t\t}\n\t}\n\n\tPosition(): Vector {\n\t\treturn {\n\t\t\tx: this.data[3],\n\t\t\ty: this.data[7],\n\t\t\tz: this.data[11],\n\t\t}\n\t}\n\n\tstatic Perspective(fovy: number, aspect: number, near: number, far: number): Matrix {\n\t\tconst c2 = (far + near) / (near - far)\n\t\tconst c1 = (2 * far * near) / (near - far)\n\n\t\tconst s = 1 / Math.tan(fovy / 2)\n\t\tconst m = new Float32Array([\n\t\t\ts / aspect, 0, 0, 0,\n\t\t\t0, s, 0, 0,\n\t\t\t0, 0, c2, c1,\n\t\t\t0, 0, -1, 0,\n\t\t])\n\t\treturn new Matrix(m)\n\t}\n}\n\nexport interface Vector {\n\tx: number\n\ty: number\n\tz: number\n}\n","import { Matrix } from './math'\n\nexport class Position {\n\tmodel: Matrix\n\n\tconstructor() {\n\t\tthis.model = Matrix.Identity()\n\t}\n\tSave(location: Float32Array, offset: number): void {\n\t\tthis.model.Save(location, offset)\n\t}\n\n\tTranslate(x: number, y: number, z: number): void {\n\t\tthis.model = Matrix.Translate(x, y, z).Multiply(this.model)\n\t}\n\n\tRotateX(rad: number): void {\n\t\tthis.model = Matrix.RotateX(rad).Multiply(this.model)\n\t}\n\tRotateXLocal(rad: number): void {\n\t\tconst p = this.model.Position()\n\t\tthis.model = Matrix.Translate(p.x, p.y, p.z)\n\t\t\t.Multiply(Matrix.RotateX(rad))\n\t\t\t.Multiply(Matrix.Translate(-p.x, -p.y, -p.z))\n\t\t\t.Multiply(this.model)\n\t}\n\n\tRotateY(rad: number): void {\n\t\tthis.model = Matrix.RotateY(rad).Multiply(this.model)\n\t}\n\tRotateYLocal(rad: number): void {\n\t\tconst p = this.model.Position()\n\t\tthis.model = Matrix.Translate(p.x, p.y, p.z)\n\t\t\t.Multiply(Matrix.RotateY(rad))\n\t\t\t.Multiply(Matrix.Translate(-p.x, -p.y, -p.z))\n\t\t\t.Multiply(this.model)\n\t}\n\n\tRotateZ(rad: number): void {\n\t\tthis.model = Matrix.RotateZ(rad).Multiply(this.model)\n\t}\n\tRotateZLocal(rad: number): void {\n\t\tconst p = this.model.Position()\n\t\tthis.model = Matrix.Translate(p.x, p.y, p.z)\n\t\t\t.Multiply(Matrix.RotateZ(rad))\n\t\t\t.Multiply(Matrix.Translate(-p.x, -p.y, -p.z))\n\t\t\t.Multiply(this.model)\n\t}\n\n\tScale(x: number, y: number, z: number): void {\n\t\tthis.model = Matrix.Scale(x, y, z).Multiply(this.model)\n\t}\n}\n","import * as GPU from './gpu'\nimport { Matrix } from './math'\n\nexport class Camera {\n\tprivate projection: Matrix\n\tprivate view: Matrix\n\tprivate fov: number\n\n\tconstructor(fieldOfView: number) {\n\t\tthis.projection = Matrix.Perspective(fieldOfView, GPU.aspect(), 0.1, 1000)\n\t\tthis.view = Matrix.Identity()\n\t\tthis.fov = fieldOfView\n\t}\n\n\tset fieldOfView(val: number) {\n\t\tthis.fov = val\n\t\tthis.projection = Matrix.Perspective(val, GPU.aspect(), 0.1, 100)\n\t}\n\n\tget fieldOfView(): number {\n\t\treturn this.fov\n\t}\n\n\tBuffer(): GPUBuffer {\n\t\tconst array = new Float32Array(16 * 2)\n\t\tthis.projection.Save(array, 0)\n\t\tthis.view.Save(array, 16)\n\t\treturn GPU.CreateBuffer(array, GPUBufferUsage.UNIFORM)\n\t}\n\n\tUpdateSize(): void {\n\t\tthis.projection = Matrix.Perspective(this.fov, GPU.aspect(), 1, 1000)\n\t}\n\n\tTranslate(x: number, y: number, z: number): void {\n\t\tthis.view = Matrix.Translate(-x, -y, -z).Multiply(this.view)\n\t}\n\n\tRotateX(rad: number): void {\n\t\tthis.view = Matrix.RotateX(-rad).Multiply(this.view)\n\t}\n\n\tRotateY(rad: number): void {\n\t\tthis.view = Matrix.RotateY(-rad).Multiply(this.view)\n\t}\n\tRotateGlobalY(rad: number): void {\n\t\tconst axis = this.view.MultiplyVector({ x: 0, y: 1, z: 0 })\n\t\tthis.view = Matrix.Rotate(-rad, axis).Multiply(this.view)\n\t}\n\tRotateZ(rad: number): void {\n\t\tthis.view = Matrix.RotateZ(-rad).Multiply(this.view)\n\t}\n}\n","module.exports = require('./helpers/bundle-url').getBundleURL('kyWCV') + require('./helpers/bundle-manifest').resolve(\"aEiTo\");","import * as GPU from './gpu'\nimport * as Module from './module'\nimport { Position } from './position'\n\nconst cloudURL = new URL('./render/cloud.wgsl', import.meta.url)\n\nlet quadBuffer = undefined as GPUBuffer | undefined\n\nlet pipeline: GPURenderPipeline | undefined = undefined\n\nexport async function Render(\n\tposition: Position,\n\tradius: number,\n\tlength: number,\n\tpositions: GPUBuffer,\n\tcolors: GPUBuffer,\n): Promise<void> {\n\tif (pipeline == undefined || quadBuffer == undefined) {\n\t\tconst src = await (await fetch(cloudURL.href)).text()\n\t\tconst module = Module.New(src)\n\t\tpipeline = GPU.device.createRenderPipeline({\n\t\t\tvertex: {\n\t\t\t\tmodule:     module,\n\t\t\t\tentryPoint: 'vertexMain',\n\t\t\t\tbuffers:    [\n\t\t\t\t\t{\n\t\t\t\t\t\tattributes: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tshaderLocation: 0,\n\t\t\t\t\t\t\t\toffset:         0 * 4,\n\t\t\t\t\t\t\t\tformat:         'float32x2',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tarrayStride: 2 * 4,\n\t\t\t\t\t\tstepMode:    'vertex',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tattributes: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tshaderLocation: 1,\n\t\t\t\t\t\t\t\toffset:         0 * 4,\n\t\t\t\t\t\t\t\tformat:         'float32x3',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tarrayStride: 4 * 4,\n\t\t\t\t\t\tstepMode:    'instance',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tattributes: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tshaderLocation: 2,\n\t\t\t\t\t\t\t\toffset:         0 * 4,\n\t\t\t\t\t\t\t\tformat:         'float32x3',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tarrayStride: 4 * 4,\n\t\t\t\t\t\tstepMode:    'instance',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\tfragment: {\n\t\t\t\tmodule:     module,\n\t\t\t\tentryPoint: 'fragmentMain',\n\t\t\t\ttargets:    [\n\t\t\t\t\t{\n\t\t\t\t\t\tformat: GPU.format,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\tdepthStencil: {\n\t\t\t\tformat:            'depth32float',\n\t\t\t\tdepthWriteEnabled: true,\n\t\t\t\tdepthCompare:      'less',\n\t\t\t},\n\t\t\tprimitive: {\n\t\t\t\ttopology:         'triangle-strip',\n\t\t\t\tstripIndexFormat: 'uint32',\n\t\t\t\tcullMode:         'back',\n\t\t\t},\n\t\t})\n\t\tquadBuffer = GPU.CreateBuffer(\n\t\t\tnew Float32Array([-1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0]),\n\t\t\tGPUBufferUsage.VERTEX,\n\t\t)\n\t}\n\n\tconst array = new Float32Array(16 + 2)\n\tposition.Save(array, 0)\n\tarray[16] = radius\n\tarray[17] = GPU.aspect()\n\tconst buffer = GPU.CreateBuffer(array, GPUBufferUsage.UNIFORM)\n\tGPU.renderPass.setPipeline(pipeline)\n\tconst group = GPU.device.createBindGroup({\n\t\tlayout:  pipeline.getBindGroupLayout(0),\n\t\tentries: [\n\t\t\t{\n\t\t\t\tbinding:  0,\n\t\t\t\tresource: { buffer: GPU.cameraBuffer },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding:  1,\n\t\t\t\tresource: { buffer: buffer },\n\t\t\t},\n\t\t],\n\t})\n\tGPU.renderPass.setBindGroup(0, group)\n\tGPU.renderPass.setVertexBuffer(0, quadBuffer)\n\tGPU.renderPass.setVertexBuffer(1, positions)\n\tGPU.renderPass.setVertexBuffer(2, colors)\n\tGPU.renderPass.draw(4, length)\n}\n","module.exports = require('./helpers/bundle-url').getBundleURL('kyWCV') + require('./helpers/bundle-manifest').resolve(\"inbDi\");","import * as GPU from './gpu'\nimport * as Module from './module'\nimport { Position } from './position'\n\nconst nearestComputeURL = new URL('./compute/kNearest.wgsl', import.meta.url)\nconst nearestRenderURL = new URL('./render/kNearest.wgsl', import.meta.url)\n\nlet computePipeline: undefined | GPUComputePipeline = undefined\nlet renderPipeline: undefined | GPURenderPipeline = undefined\n\nexport async function Compute(k: number, positions: GPUBuffer, length: number): Promise<GPUBuffer> {\n\tif (computePipeline == undefined) {\n\t\tcomputePipeline = GPU.device.createComputePipeline({\n\t\t\tcompute: {\n\t\t\t\tmodule:     Module.New(await (await fetch(nearestComputeURL.href)).text()),\n\t\t\t\tentryPoint: 'main',\n\t\t\t},\n\t\t})\n\t}\n\tconst nearest = GPU.CreateEmptyBuffer(\n\t\tlength * 4 * k,\n\t\tGPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n\t)\n\tconst param = new Uint32Array([length, k])\n\tconst buffer = GPU.CreateBuffer(param, GPUBufferUsage.STORAGE)\n\tconst group = GPU.device.createBindGroup({\n\t\tlayout:  computePipeline.getBindGroupLayout(0),\n\t\tentries: [\n\t\t\t{\n\t\t\t\tbinding:  0,\n\t\t\t\tresource: { buffer: buffer },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding:  1,\n\t\t\t\tresource: { buffer: positions },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding:  3,\n\t\t\t\tresource: { buffer: nearest },\n\t\t\t},\n\t\t],\n\t})\n\tconst encoder = GPU.device.createCommandEncoder()\n\tconst compute = encoder.beginComputePass({})\n\tcompute.setPipeline(computePipeline)\n\tcompute.setBindGroup(0, group)\n\tcompute.dispatch(Math.ceil(length / 256))\n\tcompute.endPass()\n\tGPU.device.queue.submit([encoder.finish()])\n\treturn nearest\n}\n\nexport async function Render(\n\tposition: Position,\n\tpositions: GPUBuffer,\n\tcolors: GPUBuffer,\n\tnearest: GPUBuffer,\n\tk: number,\n\tlength: number,\n): Promise<void> {\n\tif (renderPipeline == undefined) {\n\t\tconst src = await (await fetch(nearestRenderURL.href)).text()\n\t\tconst module = Module.New(src)\n\t\trenderPipeline = GPU.device.createRenderPipeline({\n\t\t\tvertex: {\n\t\t\t\tmodule:     module,\n\t\t\t\tentryPoint: 'vertexMain',\n\t\t\t\tbuffers:    [],\n\t\t\t},\n\t\t\tfragment: {\n\t\t\t\tmodule:     module,\n\t\t\t\tentryPoint: 'fragmentMain',\n\t\t\t\ttargets:    [\n\t\t\t\t\t{\n\t\t\t\t\t\tformat: GPU.format,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\tdepthStencil: {\n\t\t\t\tformat:            'depth32float',\n\t\t\t\tdepthWriteEnabled: true,\n\t\t\t\tdepthCompare:      'less',\n\t\t\t},\n\t\t\tprimitive: {\n\t\t\t\ttopology: 'line-list',\n\t\t\t},\n\t\t})\n\t}\n\tconst array = new Float32Array(16 + 1)\n\tposition.Save(array, 0)\n\tnew Uint32Array(array.buffer)[16] = k\n\tconst buffer = GPU.CreateBuffer(array, GPUBufferUsage.UNIFORM)\n\tGPU.renderPass.setPipeline(renderPipeline)\n\tconst group = GPU.device.createBindGroup({\n\t\tlayout:  renderPipeline.getBindGroupLayout(0),\n\t\tentries: [\n\t\t\t{\n\t\t\t\tbinding:  0,\n\t\t\t\tresource: { buffer: GPU.cameraBuffer },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding:  1,\n\t\t\t\tresource: { buffer: buffer },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding:  2,\n\t\t\t\tresource: { buffer: positions },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding:  3,\n\t\t\t\tresource: { buffer: colors },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding:  4,\n\t\t\t\tresource: { buffer: nearest },\n\t\t\t},\n\t\t],\n\t})\n\tGPU.renderPass.setBindGroup(0, group)\n\tGPU.renderPass.draw(length * k * 2)\n}\n","module.exports = require('./helpers/bundle-url').getBundleURL('kyWCV') + require('./helpers/bundle-manifest').resolve(\"jPa00\");","module.exports = require('./helpers/bundle-url').getBundleURL('kyWCV') + require('./helpers/bundle-manifest').resolve(\"cCzGH\");","import * as GPU from './gpu'\nimport * as Module from './module'\nimport { Position } from './position'\n\nconst triangulateComputeURL = new URL('./compute/triangulate.wgsl', import.meta.url)\nconst triangulateRenderURL = new URL('./render/triangle.wgsl', import.meta.url)\n\nlet computePipeline: undefined | GPUComputePipeline = undefined\nlet renderPipeline: undefined | GPURenderPipeline = undefined\n\nexport const K = 16\n\nexport async function Compute(positions: GPUBuffer, length: number): Promise<GPUBuffer> {\n\tif (computePipeline == undefined) {\n\t\tcomputePipeline = GPU.device.createComputePipeline({\n\t\t\tcompute: {\n\t\t\t\tmodule:     Module.New(await (await fetch(triangulateComputeURL.href)).text()),\n\t\t\t\tentryPoint: 'main',\n\t\t\t},\n\t\t})\n\t}\n\tconst nearest = GPU.CreateEmptyBuffer(\n\t\tlength * 4 * K,\n\t\tGPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n\t)\n\tconst encoder = GPU.device.createCommandEncoder()\n\tconst param = new Uint32Array([length])\n\tconst buffer = GPU.CreateBuffer(param, GPUBufferUsage.STORAGE)\n\n\tconst group = GPU.device.createBindGroup({\n\t\tlayout:  computePipeline.getBindGroupLayout(0),\n\t\tentries: [\n\t\t\t{\n\t\t\t\tbinding:  0,\n\t\t\t\tresource: { buffer: buffer },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding:  1,\n\t\t\t\tresource: { buffer: positions },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding:  2,\n\t\t\t\tresource: { buffer: nearest },\n\t\t\t},\n\t\t],\n\t})\n\tconst compute = encoder.beginComputePass()\n\tcompute.setPipeline(computePipeline)\n\tcompute.setBindGroup(0, group)\n\tcompute.dispatch(Math.ceil(length / 256))\n\tcompute.endPass()\n\tGPU.device.queue.submit([encoder.finish()])\n\n\treturn nearest\n}\n\nexport async function Render(\n\tposition: Position,\n\tpositions: GPUBuffer,\n\tcolors: GPUBuffer,\n\tnearest: GPUBuffer,\n\tk: number,\n\tlength: number,\n): Promise<void> {\n\tif (renderPipeline == undefined) {\n\t\tconst src = await (await fetch(triangulateRenderURL.href)).text()\n\t\tconst module = Module.New(src)\n\t\trenderPipeline = GPU.device.createRenderPipeline({\n\t\t\tvertex: {\n\t\t\t\tmodule:     module,\n\t\t\t\tentryPoint: 'vertexMain',\n\t\t\t\tbuffers:    [],\n\t\t\t},\n\t\t\tfragment: {\n\t\t\t\tmodule:     module,\n\t\t\t\tentryPoint: 'fragmentMain',\n\t\t\t\ttargets:    [\n\t\t\t\t\t{\n\t\t\t\t\t\tformat: GPU.format,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\tdepthStencil: {\n\t\t\t\tformat:            'depth32float',\n\t\t\t\tdepthWriteEnabled: true,\n\t\t\t\tdepthCompare:      'less',\n\t\t\t},\n\t\t\tprimitive: {\n\t\t\t\ttopology: 'triangle-list',\n\t\t\t},\n\t\t})\n\t}\n\tconst array = new Float32Array(16 + 1)\n\tposition.Save(array, 0)\n\tnew Uint32Array(array.buffer)[16] = k\n\tconst buffer = GPU.CreateBuffer(array, GPUBufferUsage.UNIFORM)\n\tGPU.renderPass.setPipeline(renderPipeline)\n\tconst group = GPU.device.createBindGroup({\n\t\tlayout:  renderPipeline.getBindGroupLayout(0),\n\t\tentries: [\n\t\t\t{\n\t\t\t\tbinding:  0,\n\t\t\t\tresource: { buffer: GPU.cameraBuffer },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding:  1,\n\t\t\t\tresource: { buffer: buffer },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding:  2,\n\t\t\t\tresource: { buffer: positions },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding:  3,\n\t\t\t\tresource: { buffer: colors },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding:  4,\n\t\t\t\tresource: { buffer: nearest },\n\t\t\t},\n\t\t],\n\t})\n\tGPU.renderPass.setBindGroup(0, group)\n\tGPU.renderPass.draw(length * k * 3)\n}\n","module.exports = require('./helpers/bundle-url').getBundleURL('kyWCV') + require('./helpers/bundle-manifest').resolve(\"7cmWl\");","module.exports = require('./helpers/bundle-url').getBundleURL('kyWCV') + require('./helpers/bundle-manifest').resolve(\"h5IBS\");","import * as GPU from './gpu'\nimport * as Module from './module'\n\nconst filterURL = new URL('./compute/filter.wgsl', import.meta.url)\n\nlet computePipeline: undefined | GPUComputePipeline = undefined\n\nexport async function Compute(nearest: GPUBuffer, k: number, length: number): Promise<void> {\n\tif (computePipeline == undefined) {\n\t\tcomputePipeline = GPU.device.createComputePipeline({\n\t\t\tcompute: {\n\t\t\t\tmodule:     Module.New(await (await fetch(filterURL.href)).text()),\n\t\t\t\tentryPoint: 'main',\n\t\t\t},\n\t\t})\n\t}\n\tconst param = new Uint32Array([length, k])\n\tconst buffer = GPU.CreateBuffer(param, GPUBufferUsage.STORAGE)\n\tconst group = GPU.device.createBindGroup({\n\t\tlayout:  computePipeline.getBindGroupLayout(0),\n\t\tentries: [\n\t\t\t{\n\t\t\t\tbinding:  0,\n\t\t\t\tresource: { buffer: buffer },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding:  1,\n\t\t\t\tresource: { buffer: nearest },\n\t\t\t},\n\t\t],\n\t})\n\tconst encoder = GPU.device.createCommandEncoder()\n\tconst compute = encoder.beginComputePass({})\n\tcompute.setPipeline(computePipeline)\n\tcompute.setBindGroup(0, group)\n\tcompute.dispatch(Math.ceil(length / 256))\n\tcompute.endPass()\n\tGPU.device.queue.submit([encoder.finish()])\n}\n","module.exports = require('./helpers/bundle-url').getBundleURL('kyWCV') + require('./helpers/bundle-manifest').resolve(\"ktFnt\");","import * as GPU from './gpu'\nimport * as Module from './module'\n\nconst edgeURL = new URL('./compute/edge.wgsl', import.meta.url)\n\n\nlet computePipeline: undefined | GPUComputePipeline = undefined\n\nexport async function Compute(\n\tcloud: GPUBuffer,\n\tnearest: GPUBuffer,\n\tcolors: GPUBuffer,\n\tk: number,\n\tlength: number,\n): Promise<void> {\n\tif (computePipeline == undefined) {\n\t\tcomputePipeline = GPU.device.createComputePipeline({\n\t\t\tcompute: {\n\t\t\t\tmodule:     Module.New(await (await fetch(edgeURL.href)).text()),\n\t\t\t\tentryPoint: 'main',\n\t\t\t},\n\t\t})\n\t}\n\tconst param = new Uint32Array([length, k])\n\tconst buffer = GPU.CreateBuffer(param, GPUBufferUsage.STORAGE)\n\tconst group = GPU.device.createBindGroup({\n\t\tlayout:  computePipeline.getBindGroupLayout(0),\n\t\tentries: [\n\t\t\t{\n\t\t\t\tbinding:  0,\n\t\t\t\tresource: { buffer: buffer },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding:  1,\n\t\t\t\tresource: { buffer: cloud },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding:  2,\n\t\t\t\tresource: { buffer: nearest },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding:  3,\n\t\t\t\tresource: { buffer: colors },\n\t\t\t},\n\t\t],\n\t})\n\tconst encoder = GPU.device.createCommandEncoder()\n\tconst compute = encoder.beginComputePass({})\n\tcompute.setPipeline(computePipeline)\n\tcompute.setBindGroup(0, group)\n\tcompute.dispatch(Math.ceil(length / 256))\n\tcompute.endPass()\n\tGPU.device.queue.submit([encoder.finish()])\n}\n","module.exports = require('./helpers/bundle-url').getBundleURL('kyWCV') + require('./helpers/bundle-manifest').resolve(\"6miId\");","import * as GPU from './gpu'\nimport * as Module from './module'\n\nconst edgeURL = new URL('./compute/edgeOld.wgsl', import.meta.url)\n\nlet computePipeline: undefined | GPUComputePipeline = undefined\n\nexport async function Compute(\n\tcloud: GPUBuffer,\n\tnearest: GPUBuffer,\n\tcolors: GPUBuffer,\n\tk: number,\n\tlength: number,\n): Promise<void> {\n\tif (computePipeline == undefined) {\n\t\tcomputePipeline = GPU.device.createComputePipeline({\n\t\t\tcompute: {\n\t\t\t\tmodule:     Module.New(await (await fetch(edgeURL.href)).text()),\n\t\t\t\tentryPoint: 'main',\n\t\t\t},\n\t\t})\n\t}\n\tconst param = new Uint32Array([length, k])\n\tconst buffer = GPU.CreateBuffer(param, GPUBufferUsage.STORAGE)\n\tconst group = GPU.device.createBindGroup({\n\t\tlayout:  computePipeline.getBindGroupLayout(0),\n\t\tentries: [\n\t\t\t{\n\t\t\t\tbinding:  0,\n\t\t\t\tresource: { buffer: buffer },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding:  1,\n\t\t\t\tresource: { buffer: cloud },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding:  2,\n\t\t\t\tresource: { buffer: nearest },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding:  3,\n\t\t\t\tresource: { buffer: colors },\n\t\t\t},\n\t\t],\n\t})\n\tconst encoder = GPU.device.createCommandEncoder()\n\tconst compute = encoder.beginComputePass({})\n\tcompute.setPipeline(computePipeline)\n\tcompute.setBindGroup(0, group)\n\tcompute.dispatch(Math.ceil(length / 256))\n\tcompute.endPass()\n\tGPU.device.queue.submit([encoder.finish()])\n}\n","import * as GPU from '../gpu/gpu'\n\nexport function CreateColors(points: number): GPUBuffer {\n\tconst colors = new Float32Array(points * 4)\n\n\tfor (let i = 0; i < points; i++) {\n\t\tcolors[i * 4 + 0] = 0.3 + 0.7 * Math.random()\n\t\tcolors[i * 4 + 1] = 0.3 + 0.7 * Math.random()\n\t\tcolors[i * 4 + 2] = 0.3 + 0.7 * Math.random()\n\t}\n\n\treturn GPU.CreateBuffer(colors, GPUBufferUsage.VERTEX | GPUBufferUsage.STORAGE)\n}\n","import * as GPU from '../gpu/gpu'\n\nexport function CreateSphere(points: number): GPUBuffer {\n\tconst vertices = new Float32Array(points * 4)\n\n\tfor (let i = 0; i < points; i++) {\n\t\tconst long = Math.acos(Math.random() * 2 - 1) //less points near the poles\n\t\tconst lat = Math.random() * 2 * Math.PI\n\n\t\tvertices[i * 4 + 0] = Math.sin(lat) * Math.sin(long)\n\t\tvertices[i * 4 + 1] = Math.cos(long)\n\t\tvertices[i * 4 + 2] = Math.cos(lat) * Math.sin(long)\n\t}\n\n\treturn GPU.CreateBuffer(vertices, GPUBufferUsage.VERTEX | GPUBufferUsage.STORAGE)\n}\n","//https://gitlab.com/taketwo/three-pcd-loader/-/blob/master/pcd-loader.js //edited\nimport * as Decompress from './decompress'\nimport * as GPU from '../gpu/gpu'\n\n/**\n * @author Filipe Caixeta / http://filipecaixeta.com.br\n * @author Sergey Alexandrov\n *\n * Description: A THREE loader for PCD files.\n *\n * Based on the example THREE.PCDLoader written by Filipe Caixeta.\n *\n * Changes:\n *\n *   - added support for compressed binary files\n *   - significantly improved header parsing time\n *   - added support for RGBA color field\n *   - removed support for normals field\n *\n */\n\nconst littleEndian = true\n\nexport function CreatePCD(data: ArrayBufferLike): [GPUBuffer, number] | undefined {\n\tconst header = parseHeader(data)\n\tif (header == null) {\n\t\treturn undefined\n\t}\n\tconst offset = header.offset\n\tlet position: Float32Array | undefined = undefined\n\tif (offset.x !== undefined && offset.y !== undefined && offset.z !== undefined) {\n\t\tposition = new Float32Array(header.points * 4)\n\t}\n\n\tlet color: Float32Array | undefined = undefined\n\tlet color_offset: number = undefined\n\tif (offset.rgb !== undefined || offset.rgba !== undefined) {\n\t\tcolor = new Float32Array(header.points * 4)\n\t\tcolor_offset = offset.rgb === undefined ? offset.rgba : offset.rgb\n\t}\n\n\tif (header.data === 'ascii') {\n\t\tconst charArrayView = new Uint8Array(data)\n\t\tlet dataString = ''\n\t\tfor (let j = header.headerLen; j < data.byteLength; j++) {\n\t\t\tdataString += String.fromCharCode(charArrayView[j])\n\t\t}\n\n\t\tconst lines = dataString.split('\\n')\n\t\tlet i3 = 0\n\t\tfor (let i = 0; i < lines.length; i++, i3 += 4) {\n\t\t\tconst line = lines[i].split(' ')\n\t\t\tif (position !== undefined) {\n\t\t\t\tposition[i3 + 0] = parseFloat(line[offset.x])\n\t\t\t\tposition[i3 + 1] = parseFloat(line[offset.y])\n\t\t\t\tposition[i3 + 2] = parseFloat(line[offset.z])\n\t\t\t}\n\t\t\tif (color !== undefined) {\n\t\t\t\tlet c: Uint32Array | Float32Array = undefined\n\t\t\t\tif (offset.rgba !== undefined) {\n\t\t\t\t\tc = new Uint32Array([parseInt(line[offset.rgba])])\n\t\t\t\t} else if (offset.rgb !== undefined) {\n\t\t\t\t\tc = new Float32Array([parseFloat(line[offset.rgb])])\n\t\t\t\t}\n\t\t\t\tconst dataview = new Uint8Array(c.buffer, 0)\n\t\t\t\tcolor[i3 + 2] = dataview[0] / 255.0\n\t\t\t\tcolor[i3 + 1] = dataview[1] / 255.0\n\t\t\t\tcolor[i3 + 0] = dataview[2] / 255.0\n\t\t\t}\n\t\t}\n\t} else if (header.data === 'binary') {\n\t\tlet row = 0\n\t\tconst dataArrayView = new DataView(data, header.headerLen)\n\t\tfor (let p = 0; p < header.points; row += header.rowSize, p++) {\n\t\t\tif (position !== undefined) {\n\t\t\t\tposition[p * 4 + 0] = dataArrayView.getFloat32(row + offset.x, littleEndian)\n\t\t\t\tposition[p * 4 + 1] = dataArrayView.getFloat32(row + offset.y, littleEndian)\n\t\t\t\tposition[p * 4 + 2] = dataArrayView.getFloat32(row + offset.z, littleEndian)\n\t\t\t}\n\t\t\tif (color !== undefined) {\n\t\t\t\tcolor[p * 4 + 2] = dataArrayView.getUint8(row + color_offset + 0) / 255.0\n\t\t\t\tcolor[p * 4 + 1] = dataArrayView.getUint8(row + color_offset + 1) / 255.0\n\t\t\t\tcolor[p * 4 + 0] = dataArrayView.getUint8(row + color_offset + 2) / 255.0\n\t\t\t}\n\t\t}\n\t} else if (header.data === 'binary_compressed') {\n\t\tconst sizes = new Uint32Array(data.slice(header.headerLen, header.headerLen + 8))\n\t\tconst compressedSize = sizes[0]\n\t\tconst decompressedSize = sizes[1]\n\t\tconst decompressed = Decompress.LZF(\n\t\t\tnew Uint8Array(data, header.headerLen + 8, compressedSize),\n\t\t\tdecompressedSize,\n\t\t)\n\t\tconst dataArrayView = new DataView(decompressed.buffer)\n\t\tfor (let p = 0; p < header.points; p++) {\n\t\t\tif (position !== undefined) {\n\t\t\t\tposition[p * 4 + 0] = dataArrayView.getFloat32(offset.x + p * 4, littleEndian)\n\t\t\t\tposition[p * 4 + 1] = dataArrayView.getFloat32(offset.y + p * 4, littleEndian)\n\t\t\t\tposition[p * 4 + 2] = dataArrayView.getFloat32(offset.z + p * 4, littleEndian)\n\t\t\t}\n\t\t\tif (color !== undefined) {\n\t\t\t\tcolor[p * 4 + 2] = dataArrayView.getUint8(color_offset + p * 4 + 0) / 255.0\n\t\t\t\tcolor[p * 4 + 1] = dataArrayView.getUint8(color_offset + p * 4 + 1) / 255.0\n\t\t\t\tcolor[p * 4 + 0] = dataArrayView.getUint8(color_offset + p * 4 + 2) / 255.0\n\t\t\t}\n\t\t}\n\t}\n\tif (position == undefined) {\n\t\treturn undefined\n\t}\n\treturn [\n\t\tGPU.CreateBuffer(position, GPUBufferUsage.VERTEX | GPUBufferUsage.STORAGE),\n\t\theader.points,\n\t]\n}\n\ntype Header = {\n\tdata: string\n\theaderLen: number\n\tstr: string\n\tversion: number\n\tfields: string[]\n\tsize: number[]\n\ttype: string[]\n\tcount: number[]\n\twidth: number\n\theight: number\n\tviewpoint: string\n\tpoints: number\n\toffset: { [key: string]: number }\n\trowSize: number\n}\n\nfunction parseHeader(binaryData: ArrayBufferLike): Header | null {\n\tlet headerText = ''\n\tconst charArray = new Uint8Array(binaryData)\n\tlet i = 0\n\tconst max = charArray.length\n\twhile (i < max && headerText.search(/[\\r\\n]DATA\\s(\\S*)\\s/i) === -1) {\n\t\theaderText += String.fromCharCode(charArray[i++])\n\t}\n\tconst result1 = headerText.search(/[\\r\\n]DATA\\s(\\S*)\\s/i)\n\tconst result2 = /[\\r\\n]DATA\\s(\\S*)\\s/i.exec(headerText.substr(result1 - 1))\n\tif (result1 == undefined || result2 == undefined) {\n\t\treturn null\n\t}\n\n\tconst header = {} as Header\n\theader.data = result2[1]\n\theader.headerLen = result2[0].length + result1\n\theader.str = headerText.substr(0, header.headerLen)\n\n\t// Remove comments\n\theader.str = header.str.replace(/#.*/gi, '')\n\tconst version = /VERSION (.*)/i.exec(header.str)\n\tif (version !== null) {\n\t\theader.version = parseFloat(version[1])\n\t}\n\tconst fields = /FIELDS (.*)/i.exec(header.str)\n\tif (fields !== null) {\n\t\theader.fields = fields[1].split(' ')\n\t}\n\tconst size = /SIZE (.*)/i.exec(header.str)\n\tif (size !== null) {\n\t\theader.size = size[1].split(' ').map(function (x) {\n\t\t\treturn parseInt(x, 10)\n\t\t})\n\t}\n\tconst type = /TYPE (.*)/i.exec(header.str)\n\tif (type !== null) {\n\t\theader.type = type[1].split(' ')\n\t}\n\tconst count = /COUNT (.*)/i.exec(header.str)\n\tif (count !== null) {\n\t\theader.count = count[1].split(' ').map(function (x) {\n\t\t\treturn parseInt(x, 10)\n\t\t})\n\t}\n\tconst width = /WIDTH (.*)/i.exec(header.str)\n\tif (width !== null) {\n\t\theader.width = parseInt(width[1])\n\t}\n\tconst height = /HEIGHT (.*)/i.exec(header.str)\n\tif (height !== null) {\n\t\theader.height = parseInt(height[1])\n\t}\n\tconst viewpoint = /VIEWPOINT (.*)/i.exec(header.str)\n\tif (viewpoint !== null) {\n\t\theader.viewpoint = viewpoint[1]\n\t}\n\tconst points = /POINTS (.*)/i.exec(header.str)\n\tif (points !== null) {\n\t\theader.points = parseInt(points[1], 10)\n\t}\n\tif (header.points === null) {\n\t\theader.points = header.width * header.height\n\t}\n\tif (header.count == undefined) {\n\t\theader.count = []\n\t\tfor (i = 0; i < header.fields.length; i++) {\n\t\t\theader.count.push(1)\n\t\t}\n\t}\n\theader.offset = {}\n\tlet sizeSum = 0\n\tfor (let j = 0; j < header.fields.length; j++) {\n\t\tif (header.data === 'ascii') {\n\t\t\theader.offset[header.fields[j]] = j\n\t\t} else if (header.data === 'binary') {\n\t\t\theader.offset[header.fields[j]] = sizeSum\n\t\t\tsizeSum += header.size[j]\n\t\t} else if (header.data === 'binary_compressed') {\n\t\t\theader.offset[header.fields[j]] = sizeSum\n\t\t\tsizeSum += header.size[j] * header.points\n\t\t}\n\t}\n\t// For binary only\n\theader.rowSize = sizeSum\n\treturn header\n}\n","//https://gitlab.com/taketwo/three-pcd-loader/-/blob/master/decompress-lzf.js //edited\nexport function LZF(inData: Uint8Array, outLength: number): Uint8Array {\n\tconst inLength = inData.length\n\tconst outData = new Uint8Array(outLength)\n\tlet inPtr = 0\n\tlet outPtr = 0\n\tdo {\n\t\tlet ctrl = inData[inPtr++]\n\t\tif (ctrl < 1 << 5) {\n\t\t\tctrl++\n\t\t\tif (outPtr + ctrl > outLength) throw new Error('Output buffer is not large enough')\n\t\t\tif (inPtr + ctrl > inLength) throw new Error('Invalid compressed data')\n\t\t\tdo {\n\t\t\t\toutData[outPtr++] = inData[inPtr++]\n\t\t\t} while (--ctrl)\n\t\t} else {\n\t\t\tlet len = ctrl >> 5\n\t\t\tlet ref = outPtr - ((ctrl & 0x1f) << 8) - 1\n\t\t\tif (inPtr >= inLength) throw new Error('Invalid compressed data')\n\t\t\tif (len === 7) {\n\t\t\t\tlen += inData[inPtr++]\n\t\t\t\tif (inPtr >= inLength) throw new Error('Invalid compressed data')\n\t\t\t}\n\t\t\tref -= inData[inPtr++]\n\t\t\tif (outPtr + len + 2 > outLength) throw new Error('Output buffer is not large enough')\n\t\t\tif (ref < 0) throw new Error('Invalid compressed data')\n\t\t\tif (ref >= outPtr) throw new Error('Invalid compressed data')\n\t\t\tdo {\n\t\t\t\toutData[outPtr++] = outData[ref++]\n\t\t\t} while (--len + 2)\n\t\t}\n\t} while (inPtr < inLength)\n\treturn outData\n}\n","module.exports = require('./helpers/bundle-url').getBundleURL('kyWCV') + require('./helpers/bundle-manifest').resolve(\"4cqXm\");","import * as GPU from './gpu/gpu'\nimport * as Lines from './gpu/lines'\nimport { Position } from './gpu/position'\nimport { Camera } from './gpu/camera'\nimport { CreateCube } from './loader/cube'\nimport * as Cloud from './gpu/cloud'\nimport * as KNearest from './gpu/kNearest'\nimport * as Triangulate from './gpu/triangulate'\nimport * as Filter from './gpu/filter'\nimport * as Edge from './gpu/edge'\nimport * as EdgeOld from './gpu/edgeOld'\nimport { CreateColors } from './loader/color'\nimport { CreateGrid } from './loader/grid'\nimport { CreateSphere } from './loader/sphere'\nimport { CreatePCD } from './loader/pcd'\n\nconst bunnyURL = new URL('./pcd/bunny.pcd', import.meta.url)\nconst ropsURL = new URL('./pcd/rops_cloud.pcd', import.meta.url)\n\n\ndocument.body.onload = async () => {\n\tconst display = document.getElementById('display') as HTMLDivElement\n\tconst canvas = await GPU.Setup(display.clientWidth, display.clientHeight)\n\tif (canvas == undefined) {\n\t\tdisplay.remove()\n\t\tconst error = document.createElement('div')\n\t\terror.className = 'error'\n\t\tconst topLine = document.createElement('div')\n\t\ttopLine.className = 'large'\n\t\ttopLine.innerHTML = 'WebGPU not available'\n\t\terror.append(topLine)\n\t\tconst botLine = document.createElement('div')\n\t\tbotLine.className = 'normal'\n\t\tbotLine.innerHTML =\n\t\t\t'Only tested with <a href=\"https://www.google.com/chrome\">Google Chrome</a>'\n\t\terror.append(botLine)\n\t\tdocument.body.append(error)\n\t\treturn\n\t}\n\tdisplay.append(canvas)\n\n\tconst cam = new Camera(Math.PI / 4)\n\tcam.Translate(0, 5, 30)\n\n\tconst increase = new Position()\n\tincrease.Scale(5, 5, 5)\n\tconst normal = new Position()\n\n\tlet k = 64\n\tlet kOld = k\n\tlet length = 50_000\n\tlet lengthOld = length\n\tlet form: 'cube' | 'sphere' | 'bunny' | 'test' = 'sphere'\n\tlet cloud = CreateSphere(length)\n\tlet colors = CreateColors(length)\n\n\tconst grid = CreateGrid(10)\n\n\tdisplay.onwheel = (ev) => {\n\t\tconst scale = 1 + ev.deltaY / 1000\n\t\tif (ev.ctrlKey == false) {\n\t\t\tincrease.Scale(scale, scale, scale)\n\t\t} else {\n\t\t\tlet fov = cam.fieldOfView * scale\n\t\t\tif (fov < Math.PI / 10) {\n\t\t\t\tfov = Math.PI / 10\n\t\t\t}\n\t\t\tif (fov > (Math.PI * 9) / 10) {\n\t\t\t\tfov = (Math.PI * 9) / 10\n\t\t\t}\n\t\t\tcam.fieldOfView = fov\n\t\t}\n\t\tev.preventDefault()\n\t\tev.stopImmediatePropagation()\n\t}\n\n\tdocument.body.onresize = () => {\n\t\tGPU.Resize(display.clientWidth, display.clientHeight)\n\t\tcam.UpdateSize()\n\t}\n\n\tconst keys: { [key: string]: true | undefined } = {}\n\tlet nearest: undefined | GPUBuffer = undefined\n\tdocument.body.onkeydown = async (ev) => {\n\t\tkeys[ev.code] = true\n\t\tswitch (ev.code) {\n\t\tcase 'KeyH':\n\t\t\tmakeHint(\n\t\t\t\t'Left mouse button: rotate camera',\n\t\t\t\t'Mouse wheel: change cloud size',\n\t\t\t\t'Mouse wheel + Control: change field of view',\n\t\t\t\t'QWER: move camera',\n\t\t\t\t'1: change cloud form',\n\t\t\t\t'1 + Control: change cloud size for sphere and cube',\n\t\t\t\t'2: compute k nearest points',\n\t\t\t\t'2 + Control: change k',\n\t\t\t\t'3: compute triangulation',\n\t\t\t\t'4: approximate normal (best with triangulation)',\n\t\t\t\t'4 + Control: approximate normal (best with k-nearest)',\n\t\t\t\t'Space: render connections with polygons',\n\t\t\t\t'0: open notes (german)',\n\t\t\t)\n\t\t\tbreak\n\t\tcase 'Digit1':\n\t\t\tif (ev.ctrlKey) {\n\t\t\t\tconst number = getUserNumber('input new cloud size')\n\t\t\t\tif (number != undefined) {\n\t\t\t\t\tlengthOld = number\n\t\t\t\t\tform = 'test'\n\t\t\t\t} else {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tcloud.destroy()\n\t\t\tcolors.destroy()\n\t\t\tswitch (form) {\n\t\t\tcase 'sphere':\n\t\t\t\tlength = lengthOld\n\t\t\t\tcloud = CreateCube(length)\n\t\t\t\tform = 'cube'\n\t\t\t\tbreak\n\t\t\tcase 'cube': {\n\t\t\t\tconst response = await fetch(bunnyURL.href)\n\t\t\t\tconst content = await (await response.blob()).arrayBuffer()\n\t\t\t\tconst result = CreatePCD(content)\n\t\t\t\tif (result != undefined) {\n\t\t\t\t\t[cloud, length] = result\n\t\t\t\t} else {\n\t\t\t\t\talert('pcd error')\n\t\t\t\t}\n\t\t\t\tform = 'bunny'\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'bunny': {\n\t\t\t\tconst response = await fetch(ropsURL.href)\n\t\t\t\tconst content = await (await response.blob()).arrayBuffer()\n\t\t\t\tconst result = CreatePCD(content)\n\t\t\t\tif (result != undefined) {\n\t\t\t\t\t[cloud, length] = result\n\t\t\t\t} else {\n\t\t\t\t\talert('pcd error')\n\t\t\t\t}\n\t\t\t\tform = 'test'\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'test':\n\t\t\t\tlength = lengthOld\n\t\t\t\tcloud = CreateSphere(length)\n\t\t\t\tform = 'sphere'\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcolors = CreateColors(length)\n\t\t\tif (nearest != undefined) {\n\t\t\t\tnearest.destroy()\n\t\t\t\tnearest = undefined\n\t\t\t}\n\t\t\tbreak\n\t\tcase 'Digit2':\n\t\t\tif (ev.ctrlKey) {\n\t\t\t\tconst number = getUserNumber('input new k for nearest points')\n\t\t\t\tif (number != undefined) {\n\t\t\t\t\tkOld = number\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (nearest != undefined) {\n\t\t\t\tnearest.destroy()\n\t\t\t}\n\t\t\tk = kOld\n\t\t\tnearest = await KNearest.Compute(k, cloud, length)\n\t\t\tbreak\n\t\tcase 'Digit3':\n\t\t\tif (nearest != undefined) {\n\t\t\t\tnearest.destroy()\n\t\t\t}\n\t\t\tnearest = await Triangulate.Compute(cloud, length)\n\t\t\tk = Triangulate.K\n\t\t\tbreak\n\t\tcase 'Digit4':\n\t\t\tif (nearest == undefined) {\n\t\t\t\talert('please calculate the connections first')\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif (ev.ctrlKey == false) {\n\t\t\t\tawait Edge.Compute(cloud, nearest, colors, k, length)\n\t\t\t} else {\n\t\t\t\tawait EdgeOld.Compute(cloud, nearest, colors, k, length)\n\t\t\t}\n\t\t\tbreak\n\t\tcase 'Digit5':\n\t\t\tif (nearest == undefined) {\n\t\t\t\talert('please calculate the connections first')\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tawait Filter.Compute(nearest, k, length)\n\t\t\tbreak\n\t\tcase 'Digit0':\n\t\t\twindow.open('notes.html', '_blank')\n\t\t}\n\t}\n\n\tdocument.body.onkeyup = (ev) => {\n\t\tdelete keys[ev.code]\n\t}\n\tmakeHint('press \\'H\\' for help')\n\n\tdisplay.onmousemove = (ev) => {\n\t\tif ((ev.buttons & 1) != 0) {\n\t\t\tcam.RotateX(-ev.movementY / 200)\n\t\t\tcam.RotateGlobalY(-ev.movementX / 200)\n\t\t}\n\t}\n\n\tlet last = await new Promise(requestAnimationFrame)\n\tconst run = true\n\twhile(run) {\n\t\tconst time = await new Promise(requestAnimationFrame)\n\t\tconst delta = time - last\n\t\tif (delta > 25) {\n\t\t\tconsole.log(delta)\n\t\t}\n\t\tconst dist = delta / 50\n\t\tconst move = (key: string, x: number, y: number, z: number) => {\n\t\t\tif (keys[key] != undefined) {\n\t\t\t\tcam.Translate(x * dist, y * dist, z * dist)\n\t\t\t}\n\t\t}\n\n\t\tmove('KeyW', 0, 0, -1)\n\t\tmove('KeyD', 1, 0, 0)\n\t\tmove('KeyS', 0, 0, 1)\n\t\tmove('KeyA', -1, 0, 0)\n\t\tmove('KeyF', 0, -1, 0)\n\t\tmove('KeyR', 0, 1, 0)\n\n\t\tGPU.StartRender(cam)\n\t\tawait Lines.Render(normal, grid.length, grid.positions, grid.colors)\n\t\tif (nearest != undefined) {\n\t\t\tif (keys['Space'] == undefined) {\n\t\t\t\tawait Cloud.Render(increase, 0.015, length, cloud, colors)\n\t\t\t\tawait KNearest.Render(increase, cloud, colors, nearest, k, length)\n\t\t\t} else {\n\t\t\t\tawait Triangulate.Render(increase, cloud, colors, nearest, k, length)\n\t\t\t}\n\t\t} else {\n\t\t\tawait Cloud.Render(increase, 0.015, length, cloud, colors)\n\t\t}\n\t\tGPU.FinishRender()\n\t\tlast = time\n\t}\n}\n\nfunction makeHint(...text: string[]): void {\n\tconst hint = document.createElement('div')\n\tlet combined = ''\n\tfor (let i = 0; i < text.length; i++) {\n\t\tcombined += text[i] + '\\n'\n\t}\n\thint.textContent = combined\n\thint.className = 'hint'\n\tdocument.body.append(hint)\n\tsetTimeout(() => {\n\t\thint.remove()\n\t}, 5000)\n}\n\nfunction getUserNumber(text: string): number | undefined {\n\tconst str = prompt(text)\n\tif (str == null) {\n\t\treturn undefined\n\t}\n\tconst x = parseInt(str)\n\tif (isNaN(x)) {\n\t\treturn undefined\n\t}\n\treturn x\n}\n","module.exports = require('./helpers/bundle-url').getBundleURL('kyWCV') + require('./helpers/bundle-manifest').resolve(\"eGv1k\");","import * as GPU from '../gpu/gpu'\n\nexport function CreateGrid(amount: number): {\n\tlength: number\n\tpositions: GPUBuffer\n\tcolors: GPUBuffer\n} {\n\tconst positions = new Float32Array((amount * 4 + 3) * 8)\n\tconst colors = new Float32Array((amount * 4 + 3) * 8)\n\ttype vec = { x: number; y: number; z: number }\n\tconst addLine = (\n\t\tidx: number,\n\t\tstart: vec,\n\t\tend: vec,\n\t\tcolor: vec,\n\t\tendColor: vec | undefined = undefined,\n\t) => {\n\t\tif (endColor == undefined) {\n\t\t\tendColor = color\n\t\t}\n\t\tidx *= 8\n\t\tpositions[idx + 0] = start.x\n\t\tpositions[idx + 1] = start.y\n\t\tpositions[idx + 2] = start.z\n\t\tcolors[idx + 0] = color.x\n\t\tcolors[idx + 1] = color.y\n\t\tcolors[idx + 2] = color.z\n\n\t\tpositions[idx + 4] = end.x\n\t\tpositions[idx + 5] = end.y\n\t\tpositions[idx + 6] = end.z\n\t\tcolors[idx + 4] = endColor.x\n\t\tcolors[idx + 5] = endColor.y\n\t\tcolors[idx + 6] = endColor.z\n\t}\n\tfor (let i = -amount; i <= amount; i++) {\n\t\tif (i == 0) {\n\t\t\tcontinue\n\t\t}\n\t\tlet idx: number\n\t\tif (i < 0) {\n\t\t\tidx = i\n\t\t} else if (i == 0) {\n\t\t\tcontinue\n\t\t} else {\n\t\t\tidx = i - 1\n\t\t}\n\t\taddLine(\n\t\t\tamount * 1 + idx,\n\t\t\t{ x: i, y: 0, z: amount },\n\t\t\t{ x: i, y: 0, z: -amount },\n\t\t\t{ x: 1, y: 1, z: 1 },\n\t\t)\n\t\taddLine(\n\t\t\tamount * 3 + idx,\n\t\t\t{ x: amount, y: 0, z: i },\n\t\t\t{ x: -amount, y: 0, z: i },\n\t\t\t{ x: 1, y: 1, z: 1 },\n\t\t)\n\t}\n\t//3 main axes\n\taddLine(\n\t\tamount * 4 + 0,\n\t\t{ x: -amount, y: 0, z: 0 },\n\t\t{ x: amount, y: 0, z: 0 },\n\t\t{ x: 1, y: 1, z: 1 },\n\t\t{ x: 1, y: 0, z: 0 },\n\t)\n\taddLine(\n\t\tamount * 4 + 1,\n\t\t{ x: 0, y: -amount, z: 0 },\n\t\t{ x: 0, y: amount, z: 0 },\n\t\t{ x: 1, y: 1, z: 1 },\n\t\t{ x: 0, y: 1, z: 0 },\n\t)\n\taddLine(\n\t\tamount * 4 + 2,\n\t\t{ x: 0, y: 0, z: -amount },\n\t\t{ x: 0, y: 0, z: amount },\n\t\t{ x: 1, y: 1, z: 1 },\n\t\t{ x: 0, y: 0, z: 1 },\n\t)\n\treturn {\n\t\tlength:    (amount * 4 + 3) * 2,\n\t\tpositions: GPU.CreateBuffer(positions, GPUBufferUsage.VERTEX | GPUBufferUsage.STORAGE),\n\t\tcolors:   \tGPU.CreateBuffer(colors, GPUBufferUsage.VERTEX | GPUBufferUsage.STORAGE),\n\t}\n}\n","import * as GPU from '../gpu/gpu'\n\nexport function CreateCube(points: number, noise = 0.001): GPUBuffer {\n\tconst vertices = new Float32Array(points * 4)\n\n\tfor (let i = 0; i < points; i++) {\n\t\tswitch (Math.floor(Math.random() * 6)) {\n\t\tcase 0:\n\t\t\tvertices[i * 4 + 0] = Math.random() * 2 - 1\n\t\t\tvertices[i * 4 + 1] = Math.random() * 2 - 1\n\t\t\tvertices[i * 4 + 2] = -1\n\t\t\tbreak\n\t\tcase 1:\n\t\t\tvertices[i * 4 + 0] = Math.random() * 2 - 1\n\t\t\tvertices[i * 4 + 1] = Math.random() * 2 - 1\n\t\t\tvertices[i * 4 + 2] = 1\n\t\t\tbreak\n\t\tcase 2:\n\t\t\tvertices[i * 4 + 0] = Math.random() * 2 - 1\n\t\t\tvertices[i * 4 + 1] = -1\n\t\t\tvertices[i * 4 + 2] = Math.random() * 2 - 1\n\t\t\tbreak\n\t\tcase 3:\n\t\t\tvertices[i * 4 + 0] = Math.random() * 2 - 1\n\t\t\tvertices[i * 4 + 1] = 1\n\t\t\tvertices[i * 4 + 2] = Math.random() * 2 - 1\n\t\t\tbreak\n\t\tcase 4:\n\t\t\tvertices[i * 4 + 0] = -1\n\t\t\tvertices[i * 4 + 1] = Math.random() * 2 - 1\n\t\t\tvertices[i * 4 + 2] = Math.random() * 2 - 1\n\t\t\tbreak\n\t\tcase 5:\n\t\t\tvertices[i * 4 + 0] = 1\n\t\t\tvertices[i * 4 + 1] = Math.random() * 2 - 1\n\t\t\tvertices[i * 4 + 2] = Math.random() * 2 - 1\n\t\t\tbreak\n\t\t}\n\t\tvertices[i * 4 + 0] += noise * Math.random()\n\t\tvertices[i * 4 + 1] += noise * Math.random()\n\t\tvertices[i * 4 + 2] += noise * Math.random()\n\t}\n\treturn GPU.CreateBuffer(vertices, GPUBufferUsage.VERTEX | GPUBufferUsage.STORAGE)\n}\n"],"names":["$2ecb43396714f886$var$adapter","$2ecb43396714f886$export$91cea577896d70d9","$8b4d1930797b255e$export$6503ec6e8aabbaf","$8b4d1930797b255e$export$f7ad0328861e2f03","$8b4d1930797b255e$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$2ecb43396714f886$export$f4c3ea57fa27606d","r","g","b","a","$2ecb43396714f886$export$d9468344d3651243","$2ecb43396714f886$var$canvas","$2ecb43396714f886$var$context","$2ecb43396714f886$var$depth","$2ecb43396714f886$export$751a9d508ac94d53","$2ecb43396714f886$export$6cb4af652bc9b62a","$2ecb43396714f886$var$encoder","$2ecb43396714f886$export$dce0f7906c5e6747","width","height","$2ecb43396714f886$export$76856258f71db1ea","configure","device","format","size","createTexture","usage","GPUTextureUsage","RENDER_ATTACHMENT","$2ecb43396714f886$export$d9f271cfccd38aff","data","buffer","createBuffer","byteLength","GPUBufferUsage","COPY_DST","COPY_SRC","mappedAtCreation","Uint8Array","getMappedRange","set","unmap","$2ecb43396714f886$export$f66cc9dded7192ac","$8be042dafc50b8b2$export$6fbbeb565555321b","src","createShaderModule","code","$f29cd6c67ea13581$export$bdfd709ae4826697","$f29cd6c67ea13581$var$bundleURL","$f29cd6c67ea13581$var$getBaseURL","url","replace","value","err","matches","stack","match","$f29cd6c67ea13581$var$getBundleURL","$79f0d2a5c057cc8e$exports","getBundleURL","resolve","$cffee1ba8299733b$var$linesURL","URL","$cffee1ba8299733b$var$pipeline","$cffee1ba8299733b$export$160ae30d75f98247","position","positions","colors","undefined","module","fetch","href","text","createRenderPipeline","vertex","entryPoint","buffers","attributes","shaderLocation","offset","arrayStride","stepMode","fragment","targets","depthStencil","depthWriteEnabled","depthCompare","primitive","topology","array","Float32Array","Save","UNIFORM","setPipeline","group","createBindGroup","layout","getBindGroupLayout","entries","binding","resource","setBindGroup","setVertexBuffer","draw","$f06af6a3bdd0ed06$export$5b12bf1653c0dd85","this","location","j","x","y","z","rad","Math","cos","sin","rad1","axis","cosN","rad2","rad3","x1","y1","z1","Multiply","m","res","c","MultiplyVector","v","Position","fovy","aspect","near","far","c2","c1","s","tan","$644414e088af120d$export$13807d9ee5a34a42","model","Identity","Translate","RotateX","RotateXLocal","p","RotateY","RotateYLocal","RotateZ","rad4","RotateZLocal","rad5","Scale","$756cea1e1408e875$export$79f141de891a5fed","fieldOfView","projection","Perspective","view","fov","val","Buffer","UpdateSize","RotateGlobalY","Rotate","$0ffd2cc0dca4b18b$exports","$a84166d7bda2f371$var$cloudURL","$a84166d7bda2f371$var$quadBuffer","$a84166d7bda2f371$var$pipeline","$a84166d7bda2f371$export$160ae30d75f98247","radius","stripIndexFormat","cullMode","VERTEX","$14f0c75aa3511722$exports","$09558262a259394c$var$nearestComputeURL","$d72c0c0240437c07$exports","$09558262a259394c$var$nearestRenderURL","$09558262a259394c$var$computePipeline","$09558262a259394c$var$renderPipeline","$09558262a259394c$export$160ae30d75f98247","nearest","k","Uint32Array","$019284257423286b$exports","$6e392b854f9c734b$var$triangulateComputeURL","$28343df2b0336177$exports","$6e392b854f9c734b$var$triangulateRenderURL","$6e392b854f9c734b$var$computePipeline","$6e392b854f9c734b$var$renderPipeline","$6e392b854f9c734b$export$160ae30d75f98247","$49ed3dbe25a50b6c$exports","$c4fb54e01da2c57e$var$filterURL","$c4fb54e01da2c57e$var$computePipeline","$68613170ccacebbd$exports","$f68497b1260e855a$var$edgeURL","$f68497b1260e855a$var$computePipeline","$ece8dbbbb0a06406$exports","$b5bdad667a4e8e27$var$edgeURL","$b5bdad667a4e8e27$var$computePipeline","$e21d8285425cd26e$export$810ca57636ebe93a","points","random","STORAGE","$7a13c13d4b1d63d7$export$7d1fdd0805366e9b","vertices","long","acos","lat","PI","$a859e594d6bf497e$export$74ec7a221154d02d","header","binaryData","headerText","charArray","max","search","String","fromCharCode","result1","result2","exec","substr","headerLen","str","version","parseFloat","fields","split","map","parseInt","type","count","viewpoint","push","sizeSum","rowSize","$a859e594d6bf497e$var$parseHeader","color","color_offset","rgb","rgba","charArrayView","dataString","lines","i3","line","dataview","row","dataArrayView","DataView","getFloat32","getUint8","sizes","slice","compressedSize","decompressedSize","decompressed","inData","outLength","inLength","outData","inPtr","outPtr","ctrl","len","ref","$d89bbe94c5ba484e$export$5339d417eece7ba4","$d36e9e2d00b0e500$exports","$5ba171b4a505aeb2$var$bunnyURL","$b920209c62959a4c$exports","$5ba171b4a505aeb2$var$ropsURL","$5ba171b4a505aeb2$var$makeHint","hint","document","createElement","combined","textContent","className","body","append","setTimeout","remove","$5ba171b4a505aeb2$var$getUserNumber","prompt","isNaN","onload","async","display","getElementById","canvas","window","navigator","gpu","requestAdapter","powerPreference","requestDevice","getContext","getPreferredFormat","$2ecb43396714f886$export$b7f8d4564d7a7fb","clientWidth","clientHeight","error","topLine","innerHTML","botLine","cam","increase","normal","kOld","lengthOld","form","cloud","grid","amount","addLine","idx","start","end","endColor","$34d2863e86ee4c16$export$731f7ff95a319b72","onwheel","ev","scale","deltaY","ctrlKey","preventDefault","stopImmediatePropagation","onresize","onkeydown","number","destroy","noise","floor","$409ab73f6cf5d415$export$d9c9771503f5e25e","response","result","blob","arrayBuffer","alert","createComputePipeline","compute","encoder","createCommandEncoder","beginComputePass","dispatch","ceil","endPass","queue","submit","finish","$09558262a259394c$export$8b332887248ef0ac","$6e392b854f9c734b$export$8b332887248ef0ac","$f68497b1260e855a$export$8b332887248ef0ac","$b5bdad667a4e8e27$export$8b332887248ef0ac","$c4fb54e01da2c57e$export$8b332887248ef0ac","open","onkeyup","onmousemove","buttons","movementY","movementX","last","Promise","requestAnimationFrame","time","delta","console","log","dist","move","key","camera","beginRenderPass","colorAttachments","loadValue","storeOp","getCurrentTexture","createView","depthStencilAttachment","depthLoadValue","depthStoreOp","stencilLoadValue","stencilStoreOp"],"version":3,"file":"index.ccd019c7.js.map"}