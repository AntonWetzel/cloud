{"version":3,"sources":["gpu/gpu.ts","gpu/module.ts","gpu/lines.ts","gpu/math.ts","gpu/position.ts","gpu/camera.ts","loader/cube.ts","gpu/cloud.ts","gpu/kNearest.ts","gpu/triangulate.ts","gpu/filter.ts","gpu/edge.ts","gpu/edgeOld.ts","loader/color.ts","loader/grid.ts","loader/sphere.ts","loader/decompress.ts","loader/pcd.ts","main.ts"],"names":[],"mappings":"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","file":"main.5a387fb2.js","sourceRoot":"..\\src","sourcesContent":["import { Camera } from './camera'\n\nlet adapter: GPUAdapter\nexport let device: GPUDevice\n\nexport const clearColor = { r: 0.0, g: 0.1, b: 0.2, a: 1.0 }\nexport let format: GPUTextureFormat\n\nlet canvas: HTMLCanvasElement\nlet context: GPUCanvasContext\n\nlet depth: GPUTexture\n\nexport let cameraBuffer: GPUBuffer\nexport let renderPass: GPURenderPassEncoder\nlet encoder: GPUCommandEncoder\n\nexport function aspect(): number {\n\treturn canvas.width / canvas.height\n}\n\nexport async function Setup(width: number, height: number): Promise<HTMLCanvasElement | undefined> {\n\tif (window.navigator.gpu == undefined) {\n\t\treturn undefined\n\t}\n\tadapter = await window.navigator.gpu.requestAdapter({\n\t\tpowerPreference: 'high-performance',\n\t})\n\tdevice = await adapter.requestDevice()\n\n\tcanvas = document.createElement('canvas')\n\tcontext = canvas.getContext('webgpu')\n\n\tformat = context.getPreferredFormat(adapter)\n\n\tResize(width, height)\n\n\treturn canvas\n}\n\nexport function Resize(width: number, height: number): void {\n\tcontext.configure({\n\t\tdevice: device,\n\t\tformat: format,\n\t\tsize: { width: width, height: height },\n\t})\n\tcanvas.width = width\n\tcanvas.height = height\n\n\tdepth = device.createTexture({\n\t\tsize: {\n\t\t\twidth: canvas.width,\n\t\t\theight: canvas.height,\n\t\t},\n\t\tformat: 'depth32float',\n\t\tusage: GPUTextureUsage.RENDER_ATTACHMENT,\n\t})\n}\n\nexport function StartRender(camera: Camera): void {\n\tencoder = device.createCommandEncoder()\n\trenderPass = encoder.beginRenderPass({\n\t\tcolorAttachments: [\n\t\t\t{\n\t\t\t\tloadValue: clearColor,\n\t\t\t\tstoreOp: 'store',\n\t\t\t\tview: context.getCurrentTexture().createView(),\n\t\t\t},\n\t\t],\n\t\tdepthStencilAttachment: {\n\t\t\tdepthLoadValue: 1.0,\n\t\t\tdepthStoreOp: 'store',\n\t\t\tstencilLoadValue: 0,\n\t\t\tstencilStoreOp: 'store',\n\t\t\tview: depth.createView(),\n\t\t},\n\t})\n\tcameraBuffer = camera.Buffer()\n}\n\nexport function FinishRender(): void {\n\trenderPass.endPass()\n\tdevice.queue.submit([encoder.finish()])\n}\n\nexport function CreateBuffer(data: Float32Array | Uint32Array, usage: GPUFlagsConstant): GPUBuffer {\n\tconst buffer = device.createBuffer({\n\t\tsize: data.byteLength,\n\t\tusage: GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC | usage,\n\t\tmappedAtCreation: true,\n\t})\n\tnew Uint8Array(buffer.getMappedRange()).set(new Uint8Array(data.buffer))\n\tbuffer.unmap()\n\treturn buffer\n}\n\nexport function CreateEmptyBuffer(length: number, usage: GPUFlagsConstant): GPUBuffer {\n\tconst buffer = device.createBuffer({\n\t\tsize: length,\n\t\tusage: usage,\n\t\tmappedAtCreation: false,\n\t})\n\treturn buffer\n}\nexport async function ReadBuffer(buffer: GPUBuffer, size: number): Promise<ArrayBuffer> {\n\tconst temp = CreateEmptyBuffer(size, GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST)\n\t// Encode commands for copying buffer to buffer.\n\tconst copyEncoder = device.createCommandEncoder()\n\tcopyEncoder.copyBufferToBuffer(\n\t\tbuffer /* source buffer */,\n\t\t0 /* source offset */,\n\t\ttemp /* destination buffer */,\n\t\t0 /* destination offset */,\n\t\tsize /* size */,\n\t)\n\tconst copyCommands = copyEncoder.finish()\n\tdevice.queue.submit([copyCommands])\n\tawait temp.mapAsync(GPUMapMode.READ)\n\tconst copyArrayBuffer = temp.getMappedRange()\n\treturn copyArrayBuffer\n}\n","import * as GPU from './gpu'\n\nexport function New(src: string): GPUShaderModule {\n\tconst module = GPU.device.createShaderModule({\n\t\tcode: src,\n\t})\n\treturn module\n}\n","import * as GPU from './gpu'\nimport * as Module from './module'\nimport { Position } from './position'\n\nlet pipeline: GPURenderPipeline | undefined = undefined\n\nexport async function Render(\n\tposition: Position,\n\tlength: number,\n\tpositions: GPUBuffer,\n\tcolors: GPUBuffer,\n): Promise<void> {\n\tif (pipeline == undefined) {\n\t\tconst src = await (await fetch('render/lines.wgsl')).text()\n\t\tconst module = Module.New(src)\n\n\t\tpipeline = GPU.device.createRenderPipeline({\n\t\t\tvertex: {\n\t\t\t\tmodule: module,\n\t\t\t\tentryPoint: 'vertexMain',\n\t\t\t\tbuffers: [\n\t\t\t\t\t{\n\t\t\t\t\t\tattributes: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tshaderLocation: 0,\n\t\t\t\t\t\t\t\toffset: 0 * 4,\n\t\t\t\t\t\t\t\tformat: 'float32x3',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tarrayStride: 4 * 4,\n\t\t\t\t\t\tstepMode: 'vertex',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tattributes: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tshaderLocation: 1,\n\t\t\t\t\t\t\t\toffset: 0 * 4,\n\t\t\t\t\t\t\t\tformat: 'float32x3',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tarrayStride: 4 * 4,\n\t\t\t\t\t\tstepMode: 'vertex',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\tfragment: {\n\t\t\t\tmodule: module,\n\t\t\t\tentryPoint: 'fragmentMain',\n\t\t\t\ttargets: [\n\t\t\t\t\t{\n\t\t\t\t\t\tformat: GPU.format,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\tdepthStencil: {\n\t\t\t\tformat: 'depth32float',\n\t\t\t\tdepthWriteEnabled: true,\n\t\t\t\tdepthCompare: 'less',\n\t\t\t},\n\t\t\tprimitive: {\n\t\t\t\ttopology: 'line-list',\n\t\t\t},\n\t\t})\n\t}\n\n\tconst array = new Float32Array(16)\n\tposition.Save(array, 0)\n\tconst buffer = GPU.CreateBuffer(array, GPUBufferUsage.UNIFORM)\n\tGPU.renderPass.setPipeline(pipeline)\n\tconst group = GPU.device.createBindGroup({\n\t\tlayout: pipeline.getBindGroupLayout(0),\n\t\tentries: [\n\t\t\t{\n\t\t\t\tbinding: 0,\n\t\t\t\tresource: { buffer: GPU.cameraBuffer },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding: 1,\n\t\t\t\tresource: { buffer: buffer },\n\t\t\t},\n\t\t],\n\t})\n\tGPU.renderPass.setBindGroup(0, group)\n\tGPU.renderPass.setVertexBuffer(0, positions)\n\tGPU.renderPass.setVertexBuffer(1, colors)\n\tGPU.renderPass.draw(length)\n}\n","export class Matrix {\n\tprivate data: Float32Array\n\n\tprivate constructor(data: Float32Array) {\n\t\tthis.data = data\n\t}\n\n\tstatic Identity(): Matrix {\n\t\treturn new Matrix(\n\t\t\tnew Float32Array([\n\t\t\t\t/*eslint-disable*/\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, 1, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1,\n\t\t\t\t/*eslint-enable*/\n\t\t\t]),\n\t\t)\n\t}\n\n\tSave(location: Float32Array, offset: number): void {\n\t\tfor (let i = 0; i < 4; i++) {\n\t\t\tfor (let j = 0; j < 4; j++) {\n\t\t\t\tlocation[offset + i * 4 + j] = this.data[i + j * 4]\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic Translate(x: number, y: number, z: number): Matrix {\n\t\treturn new Matrix(\n\t\t\tnew Float32Array([\n\t\t\t\t/*eslint-disable*/\n\t\t\t\t1, 0, 0, x,\n\t\t\t\t0, 1, 0, y,\n\t\t\t\t0, 0, 1, z,\n\t\t\t\t0, 0, 0, 1\n\t\t\t\t/*eslint-enable*/\n\t\t\t]),\n\t\t)\n\t}\n\n\tstatic RotateX(rad: number): Matrix {\n\t\treturn new Matrix(\n\t\t\tnew Float32Array([\n\t\t\t\t/*eslint-disable*/\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, Math.cos(rad), -Math.sin(rad), 0,\n\t\t\t\t0, Math.sin(rad), Math.cos(rad), 0,\n\t\t\t\t0, 0, 0, 1,\n\t\t\t\t/*eslint-enable*/\n\t\t\t]),\n\t\t)\n\t}\n\n\tstatic Rotate(rad: number, axis: Vector): Matrix {\n\t\tconst sin = Math.sin(rad)\n\t\tconst cos = Math.cos(rad)\n\t\tconst cosN = 1 - cos\n\t\t//https://en.wikipedia.org/wiki/Rotation_matrix#Rotation_matrix_from_axis_and_angle\n\t\treturn new Matrix(\n\t\t\tnew Float32Array([\n\t\t\t\t/*eslint-disable*/\n\t\t\t\taxis.x*axis.x*cosN + cos,\n\t\t\t\taxis.x*axis.y*cosN - axis.z*sin,\n\t\t\t\taxis.x*axis.z*cosN + axis.y*sin,\n\t\t\t\t0,\n\n\t\t\t\taxis.y*axis.x*cosN + axis.z*sin,\n\t\t\t\taxis.y*axis.y*cosN + cos,\n\t\t\t\taxis.y*axis.z*cosN - axis.x*sin,\n\t\t\t\t0,\n\n\t\t\t\taxis.z*axis.x*cosN - axis.y*sin,\n\t\t\t\taxis.z*axis.y*cosN + axis.x*sin,\n\t\t\t\taxis.z*axis.z*cosN + cos,\n\t\t\t\t0,\n\n\t\t\t\t0, 0, 0, 1,\n\t\t\t\t/*eslint-enable*/\n\t\t\t]),\n\t\t)\n\t}\n\n\tstatic RotateY(rad: number): Matrix {\n\t\treturn new Matrix(\n\t\t\tnew Float32Array([\n\t\t\t\t/*eslint-disable*/\n\t\t\t\tMath.cos(rad), 0, Math.sin(rad), 0,\n\t\t\t\t0, 1, 0, 0,\n\t\t\t\t-Math.sin(rad), 0, Math.cos(rad), 0,\n\t\t\t\t0, 0, 0, 1,\n\t\t\t\t/*eslint-enable*/\n\t\t\t]),\n\t\t)\n\t}\n\n\tstatic RotateZ(rad: number): Matrix {\n\t\treturn new Matrix(\n\t\t\tnew Float32Array([\n\t\t\t\t/*eslint-disable*/\n\t\t\t\tMath.cos(rad), -Math.sin(rad), 0, 0,\n\t\t\t\tMath.sin(rad), Math.cos(rad), 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1,\n\t\t\t\t/*eslint-enable*/\n\t\t\t]),\n\t\t)\n\t}\n\n\tstatic Scale(x: number, y: number, z: number): Matrix {\n\t\treturn new Matrix(\n\t\t\tnew Float32Array([\n\t\t\t\t/*eslint-disable*/\n\t\t\t\tx, 0, 0, 0,\n\t\t\t\t0, y, 0, 0,\n\t\t\t\t0, 0, z, 0,\n\t\t\t\t0, 0, 0, 1,\n\t\t\t\t/*eslint-enable*/\n\t\t\t]),\n\t\t)\n\t}\n\n\tMultiply(m: Matrix): Matrix {\n\t\tconst res = new Float32Array(16)\n\t\tfor (let i = 0; i < 4; i++) {\n\t\t\tfor (let j = 0; j < 4; j++) {\n\t\t\t\tfor (let c = 0; c < 4; c++) {\n\t\t\t\t\tres[i + j * 4] += this.data[c + j * 4] * m.data[i + c * 4]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn new Matrix(res)\n\t}\n\n\tMultiplyVector(v: Vector): Vector {\n\t\treturn {\n\t\t\tx: this.data[0] * v.x + this.data[1] * v.y + this.data[2] * v.z,\n\t\t\ty: this.data[4] * v.x + this.data[5] * v.y + this.data[6] * v.z,\n\t\t\tz: this.data[8] * v.x + this.data[9] * v.y + this.data[10] * v.z,\n\t\t}\n\t}\n\n\tPosition(): Vector {\n\t\treturn {\n\t\t\tx: this.data[3],\n\t\t\ty: this.data[7],\n\t\t\tz: this.data[11],\n\t\t}\n\t}\n\n\tstatic Perspective(fovy: number, aspect: number, near: number, far: number): Matrix {\n\t\tconst c2 = (far + near) / (near - far)\n\t\tconst c1 = (2 * far * near) / (near - far)\n\n\t\tconst s = 1 / Math.tan(fovy / 2)\n\t\tconst m = new Float32Array([\n\t\t\t/*eslint-disable*/\n\t\t\ts / aspect, 0, 0, 0,\n\t\t\t0, s, 0, 0,\n\t\t\t0, 0, c2, c1,\n\t\t\t0, 0, -1, 0,\n\t\t\t/*eslint-enable*/\n\t\t])\n\t\treturn new Matrix(m)\n\t}\n}\n\nexport interface Vector {\n\tx: number\n\ty: number\n\tz: number\n}\n","import { Matrix } from './math'\n\nexport class Position {\n\tmodel: Matrix\n\n\tconstructor() {\n\t\tthis.model = Matrix.Identity()\n\t}\n\tSave(location: Float32Array, offset: number): void {\n\t\tthis.model.Save(location, offset)\n\t}\n\n\tTranslate(x: number, y: number, z: number): void {\n\t\tthis.model = Matrix.Translate(x, y, z).Multiply(this.model)\n\t}\n\n\tRotateX(rad: number): void {\n\t\tthis.model = Matrix.RotateX(rad).Multiply(this.model)\n\t}\n\tRotateXLocal(rad: number): void {\n\t\tconst p = this.model.Position()\n\t\tthis.model = Matrix.Translate(p.x, p.y, p.z)\n\t\t\t.Multiply(Matrix.RotateX(rad))\n\t\t\t.Multiply(Matrix.Translate(-p.x, -p.y, -p.z))\n\t\t\t.Multiply(this.model)\n\t}\n\n\tRotateY(rad: number): void {\n\t\tthis.model = Matrix.RotateY(rad).Multiply(this.model)\n\t}\n\tRotateYLocal(rad: number): void {\n\t\tconst p = this.model.Position()\n\t\tthis.model = Matrix.Translate(p.x, p.y, p.z)\n\t\t\t.Multiply(Matrix.RotateY(rad))\n\t\t\t.Multiply(Matrix.Translate(-p.x, -p.y, -p.z))\n\t\t\t.Multiply(this.model)\n\t}\n\n\tRotateZ(rad: number): void {\n\t\tthis.model = Matrix.RotateZ(rad).Multiply(this.model)\n\t}\n\tRotateZLocal(rad: number): void {\n\t\tconst p = this.model.Position()\n\t\tthis.model = Matrix.Translate(p.x, p.y, p.z)\n\t\t\t.Multiply(Matrix.RotateZ(rad))\n\t\t\t.Multiply(Matrix.Translate(-p.x, -p.y, -p.z))\n\t\t\t.Multiply(this.model)\n\t}\n\n\tScale(x: number, y: number, z: number): void {\n\t\tthis.model = Matrix.Scale(x, y, z).Multiply(this.model)\n\t}\n}\n","import * as GPU from './gpu'\nimport { Matrix } from './math'\n\nexport class Camera {\n\tprivate projection: Matrix\n\tprivate view: Matrix\n\tprivate fov: number\n\n\tconstructor(fieldOfView: number) {\n\t\tthis.projection = Matrix.Perspective(fieldOfView, GPU.aspect(), 0.1, 1000)\n\t\tthis.view = Matrix.Identity()\n\t\tthis.fov = fieldOfView\n\t}\n\n\tset fieldOfView(val: number) {\n\t\tthis.fov = val\n\t\tthis.projection = Matrix.Perspective(val, GPU.aspect(), 0.1, 100)\n\t}\n\n\tget fieldOfView(): number {\n\t\treturn this.fov\n\t}\n\n\tBuffer(): GPUBuffer {\n\t\tconst array = new Float32Array(16 * 2)\n\t\tthis.projection.Save(array, 0)\n\t\tthis.view.Save(array, 16)\n\t\treturn GPU.CreateBuffer(array, GPUBufferUsage.UNIFORM)\n\t}\n\n\tUpdateSize(): void {\n\t\tthis.projection = Matrix.Perspective(this.fov, GPU.aspect(), 1, 1000)\n\t}\n\n\tTranslate(x: number, y: number, z: number): void {\n\t\tthis.view = Matrix.Translate(-x, -y, -z).Multiply(this.view)\n\t}\n\n\tRotateX(rad: number): void {\n\t\tthis.view = Matrix.RotateX(-rad).Multiply(this.view)\n\t}\n\n\tRotateY(rad: number): void {\n\t\tthis.view = Matrix.RotateY(-rad).Multiply(this.view)\n\t}\n\tRotateGlobalY(rad: number): void {\n\t\tconst axis = this.view.MultiplyVector({ x: 0, y: 1, z: 0 })\n\t\tthis.view = Matrix.Rotate(-rad, axis).Multiply(this.view)\n\t}\n\tRotateZ(rad: number): void {\n\t\tthis.view = Matrix.RotateZ(-rad).Multiply(this.view)\n\t}\n}\n","import * as GPU from '../gpu/gpu'\n\nexport function CreateCube(points: number, noise = 0.001): GPUBuffer {\n\tconst vertices = new Float32Array(points * 4)\n\n\tfor (let i = 0; i < points; i++) {\n\t\tswitch (Math.floor(Math.random() * 6)) {\n\t\tcase 0:\n\t\t\tvertices[i * 4 + 0] = Math.random() * 2 - 1\n\t\t\tvertices[i * 4 + 1] = Math.random() * 2 - 1\n\t\t\tvertices[i * 4 + 2] = -1\n\t\t\tbreak\n\t\tcase 1:\n\t\t\tvertices[i * 4 + 0] = Math.random() * 2 - 1\n\t\t\tvertices[i * 4 + 1] = Math.random() * 2 - 1\n\t\t\tvertices[i * 4 + 2] = 1\n\t\t\tbreak\n\t\tcase 2:\n\t\t\tvertices[i * 4 + 0] = Math.random() * 2 - 1\n\t\t\tvertices[i * 4 + 1] = -1\n\t\t\tvertices[i * 4 + 2] = Math.random() * 2 - 1\n\t\t\tbreak\n\t\tcase 3:\n\t\t\tvertices[i * 4 + 0] = Math.random() * 2 - 1\n\t\t\tvertices[i * 4 + 1] = 1\n\t\t\tvertices[i * 4 + 2] = Math.random() * 2 - 1\n\t\t\tbreak\n\t\tcase 4:\n\t\t\tvertices[i * 4 + 0] = -1\n\t\t\tvertices[i * 4 + 1] = Math.random() * 2 - 1\n\t\t\tvertices[i * 4 + 2] = Math.random() * 2 - 1\n\t\t\tbreak\n\t\tcase 5:\n\t\t\tvertices[i * 4 + 0] = 1\n\t\t\tvertices[i * 4 + 1] = Math.random() * 2 - 1\n\t\t\tvertices[i * 4 + 2] = Math.random() * 2 - 1\n\t\t\tbreak\n\t\t}\n\t\tvertices[i * 4 + 0] += noise * Math.random()\n\t\tvertices[i * 4 + 1] += noise * Math.random()\n\t\tvertices[i * 4 + 2] += noise * Math.random()\n\t}\n\treturn GPU.CreateBuffer(vertices, GPUBufferUsage.VERTEX | GPUBufferUsage.STORAGE)\n}\n","import * as GPU from './gpu'\nimport * as Module from './module'\nimport { Position } from './position'\n\nlet quadBuffer = undefined as GPUBuffer | undefined\n\nlet pipeline: GPURenderPipeline | undefined = undefined\n\nexport async function Render(\n\tposition: Position,\n\tradius: number,\n\tlength: number,\n\tpositions: GPUBuffer,\n\tcolors: GPUBuffer,\n): Promise<void> {\n\tif (pipeline == undefined || quadBuffer == undefined) {\n\t\tconst src = await (await fetch('render/cloud.wgsl')).text()\n\t\tconst module = Module.New(src)\n\t\tpipeline = GPU.device.createRenderPipeline({\n\t\t\tvertex: {\n\t\t\t\tmodule: module,\n\t\t\t\tentryPoint: 'vertexMain',\n\t\t\t\tbuffers: [\n\t\t\t\t\t{\n\t\t\t\t\t\tattributes: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tshaderLocation: 0,\n\t\t\t\t\t\t\t\toffset: 0 * 4,\n\t\t\t\t\t\t\t\tformat: 'float32x2',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tarrayStride: 2 * 4,\n\t\t\t\t\t\tstepMode: 'vertex',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tattributes: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tshaderLocation: 1,\n\t\t\t\t\t\t\t\toffset: 0 * 4,\n\t\t\t\t\t\t\t\tformat: 'float32x3',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tarrayStride: 4 * 4,\n\t\t\t\t\t\tstepMode: 'instance',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tattributes: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tshaderLocation: 2,\n\t\t\t\t\t\t\t\toffset: 0 * 4,\n\t\t\t\t\t\t\t\tformat: 'float32x3',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tarrayStride: 4 * 4,\n\t\t\t\t\t\tstepMode: 'instance',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\tfragment: {\n\t\t\t\tmodule: module,\n\t\t\t\tentryPoint: 'fragmentMain',\n\t\t\t\ttargets: [\n\t\t\t\t\t{\n\t\t\t\t\t\tformat: GPU.format,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\tdepthStencil: {\n\t\t\t\tformat: 'depth32float',\n\t\t\t\tdepthWriteEnabled: true,\n\t\t\t\tdepthCompare: 'less',\n\t\t\t},\n\t\t\tprimitive: {\n\t\t\t\ttopology: 'triangle-strip',\n\t\t\t\tstripIndexFormat: 'uint32',\n\t\t\t\tcullMode: 'back',\n\t\t\t},\n\t\t})\n\t\tquadBuffer = GPU.CreateBuffer(\n\t\t\tnew Float32Array([-1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0]),\n\t\t\tGPUBufferUsage.VERTEX,\n\t\t)\n\t}\n\n\tconst array = new Float32Array(16 + 2)\n\tposition.Save(array, 0)\n\tarray[16] = radius\n\tarray[17] = GPU.aspect()\n\tconst buffer = GPU.CreateBuffer(array, GPUBufferUsage.UNIFORM)\n\tGPU.renderPass.setPipeline(pipeline)\n\tconst group = GPU.device.createBindGroup({\n\t\tlayout: pipeline.getBindGroupLayout(0),\n\t\tentries: [\n\t\t\t{\n\t\t\t\tbinding: 0,\n\t\t\t\tresource: { buffer: GPU.cameraBuffer },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding: 1,\n\t\t\t\tresource: { buffer: buffer },\n\t\t\t},\n\t\t],\n\t})\n\tGPU.renderPass.setBindGroup(0, group)\n\tGPU.renderPass.setVertexBuffer(0, quadBuffer)\n\tGPU.renderPass.setVertexBuffer(1, positions)\n\tGPU.renderPass.setVertexBuffer(2, colors)\n\tGPU.renderPass.draw(4, length)\n}\n","import * as GPU from './gpu'\nimport * as Module from './module'\nimport { Position } from './position'\n\nlet computePipeline: undefined | GPUComputePipeline = undefined\nlet renderPipeline: undefined | GPURenderPipeline = undefined\n\nexport async function Compute(k: number, positions: GPUBuffer, length: number): Promise<GPUBuffer> {\n\tif (computePipeline == undefined) {\n\t\tcomputePipeline = GPU.device.createComputePipeline({\n\t\t\tcompute: {\n\t\t\t\tmodule: Module.New(await (await fetch('compute/kNearest.wgsl')).text()),\n\t\t\t\tentryPoint: 'main',\n\t\t\t},\n\t\t})\n\t}\n\tconst nearest = GPU.CreateEmptyBuffer(\n\t\tlength * 4 * k,\n\t\tGPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n\t)\n\tconst param = new Uint32Array([length, k])\n\tconst buffer = GPU.CreateBuffer(param, GPUBufferUsage.STORAGE)\n\tconst group = GPU.device.createBindGroup({\n\t\tlayout: computePipeline.getBindGroupLayout(0),\n\t\tentries: [\n\t\t\t{\n\t\t\t\tbinding: 0,\n\t\t\t\tresource: { buffer: buffer },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding: 1,\n\t\t\t\tresource: { buffer: positions },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding: 3,\n\t\t\t\tresource: { buffer: nearest },\n\t\t\t},\n\t\t],\n\t})\n\tconst encoder = GPU.device.createCommandEncoder()\n\tconst compute = encoder.beginComputePass({})\n\tcompute.setPipeline(computePipeline)\n\tcompute.setBindGroup(0, group)\n\tcompute.dispatch(Math.ceil(length / 256))\n\tcompute.endPass()\n\tGPU.device.queue.submit([encoder.finish()])\n\treturn nearest\n}\n\nexport async function Render(\n\tposition: Position,\n\tpositions: GPUBuffer,\n\tcolors: GPUBuffer,\n\tnearest: GPUBuffer,\n\tk: number,\n\tlength: number,\n): Promise<void> {\n\tif (renderPipeline == undefined) {\n\t\tconst src = await (await fetch('render/kNearest.wgsl')).text()\n\t\tconst module = Module.New(src)\n\t\trenderPipeline = GPU.device.createRenderPipeline({\n\t\t\tvertex: {\n\t\t\t\tmodule: module,\n\t\t\t\tentryPoint: 'vertexMain',\n\t\t\t\tbuffers: [],\n\t\t\t},\n\t\t\tfragment: {\n\t\t\t\tmodule: module,\n\t\t\t\tentryPoint: 'fragmentMain',\n\t\t\t\ttargets: [\n\t\t\t\t\t{\n\t\t\t\t\t\tformat: GPU.format,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\tdepthStencil: {\n\t\t\t\tformat: 'depth32float',\n\t\t\t\tdepthWriteEnabled: true,\n\t\t\t\tdepthCompare: 'less',\n\t\t\t},\n\t\t\tprimitive: {\n\t\t\t\ttopology: 'line-list',\n\t\t\t},\n\t\t})\n\t}\n\tconst array = new Float32Array(16 + 1)\n\tposition.Save(array, 0)\n\tnew Uint32Array(array.buffer)[16] = k\n\tconst buffer = GPU.CreateBuffer(array, GPUBufferUsage.UNIFORM)\n\tGPU.renderPass.setPipeline(renderPipeline)\n\tconst group = GPU.device.createBindGroup({\n\t\tlayout: renderPipeline.getBindGroupLayout(0),\n\t\tentries: [\n\t\t\t{\n\t\t\t\tbinding: 0,\n\t\t\t\tresource: { buffer: GPU.cameraBuffer },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding: 1,\n\t\t\t\tresource: { buffer: buffer },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding: 2,\n\t\t\t\tresource: { buffer: positions },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding: 3,\n\t\t\t\tresource: { buffer: colors },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding: 4,\n\t\t\t\tresource: { buffer: nearest },\n\t\t\t},\n\t\t],\n\t})\n\tGPU.renderPass.setBindGroup(0, group)\n\tGPU.renderPass.draw(length * k * 2)\n}\n","import * as GPU from './gpu'\nimport * as Module from './module'\nimport { Position } from './position'\n\nlet computePipeline: undefined | GPUComputePipeline = undefined\nlet renderPipeline: undefined | GPURenderPipeline = undefined\n\nexport const K = 16\n\nexport async function Compute(positions: GPUBuffer, length: number): Promise<GPUBuffer> {\n\tif (computePipeline == undefined) {\n\t\tcomputePipeline = GPU.device.createComputePipeline({\n\t\t\tcompute: {\n\t\t\t\tmodule: Module.New(await (await fetch('compute/triangulate.wgsl')).text()),\n\t\t\t\tentryPoint: 'main',\n\t\t\t},\n\t\t})\n\t}\n\tconst nearest = GPU.CreateEmptyBuffer(\n\t\tlength * 4 * K,\n\t\tGPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n\t)\n\tconst encoder = GPU.device.createCommandEncoder()\n\tconst param = new Uint32Array([length])\n\tconst buffer = GPU.CreateBuffer(param, GPUBufferUsage.STORAGE)\n\n\tconst group = GPU.device.createBindGroup({\n\t\tlayout: computePipeline.getBindGroupLayout(0),\n\t\tentries: [\n\t\t\t{\n\t\t\t\tbinding: 0,\n\t\t\t\tresource: { buffer: buffer },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding: 1,\n\t\t\t\tresource: { buffer: positions },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding: 2,\n\t\t\t\tresource: { buffer: nearest },\n\t\t\t},\n\t\t],\n\t})\n\tconst compute = encoder.beginComputePass()\n\tcompute.setPipeline(computePipeline)\n\tcompute.setBindGroup(0, group)\n\tcompute.dispatch(Math.ceil(length / 256))\n\tcompute.endPass()\n\tGPU.device.queue.submit([encoder.finish()])\n\n\treturn nearest\n}\n\nexport async function Render(\n\tposition: Position,\n\tpositions: GPUBuffer,\n\tcolors: GPUBuffer,\n\tnearest: GPUBuffer,\n\tk: number,\n\tlength: number,\n): Promise<void> {\n\tif (renderPipeline == undefined) {\n\t\tconst src = await (await fetch('render/triangle.wgsl')).text()\n\t\tconst module = Module.New(src)\n\t\trenderPipeline = GPU.device.createRenderPipeline({\n\t\t\tvertex: {\n\t\t\t\tmodule: module,\n\t\t\t\tentryPoint: 'vertexMain',\n\t\t\t\tbuffers: [],\n\t\t\t},\n\t\t\tfragment: {\n\t\t\t\tmodule: module,\n\t\t\t\tentryPoint: 'fragmentMain',\n\t\t\t\ttargets: [\n\t\t\t\t\t{\n\t\t\t\t\t\tformat: GPU.format,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\tdepthStencil: {\n\t\t\t\tformat: 'depth32float',\n\t\t\t\tdepthWriteEnabled: true,\n\t\t\t\tdepthCompare: 'less',\n\t\t\t},\n\t\t\tprimitive: {\n\t\t\t\ttopology: 'triangle-list',\n\t\t\t},\n\t\t})\n\t}\n\tconst array = new Float32Array(16 + 1)\n\tposition.Save(array, 0)\n\tnew Uint32Array(array.buffer)[16] = k\n\tconst buffer = GPU.CreateBuffer(array, GPUBufferUsage.UNIFORM)\n\tGPU.renderPass.setPipeline(renderPipeline)\n\tconst group = GPU.device.createBindGroup({\n\t\tlayout: renderPipeline.getBindGroupLayout(0),\n\t\tentries: [\n\t\t\t{\n\t\t\t\tbinding: 0,\n\t\t\t\tresource: { buffer: GPU.cameraBuffer },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding: 1,\n\t\t\t\tresource: { buffer: buffer },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding: 2,\n\t\t\t\tresource: { buffer: positions },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding: 3,\n\t\t\t\tresource: { buffer: colors },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding: 4,\n\t\t\t\tresource: { buffer: nearest },\n\t\t\t},\n\t\t],\n\t})\n\tGPU.renderPass.setBindGroup(0, group)\n\tGPU.renderPass.draw(length * k * 3)\n}\n","import * as GPU from './gpu'\nimport * as Module from './module'\n\nlet computePipeline: undefined | GPUComputePipeline = undefined\n\nexport async function Compute(nearest: GPUBuffer, k: number, length: number): Promise<void> {\n\tif (computePipeline == undefined) {\n\t\tcomputePipeline = GPU.device.createComputePipeline({\n\t\t\tcompute: {\n\t\t\t\tmodule: Module.New(await (await fetch('compute/filter.wgsl')).text()),\n\t\t\t\tentryPoint: 'main',\n\t\t\t},\n\t\t})\n\t}\n\tconst param = new Uint32Array([length, k])\n\tconst buffer = GPU.CreateBuffer(param, GPUBufferUsage.STORAGE)\n\tconst group = GPU.device.createBindGroup({\n\t\tlayout: computePipeline.getBindGroupLayout(0),\n\t\tentries: [\n\t\t\t{\n\t\t\t\tbinding: 0,\n\t\t\t\tresource: { buffer: buffer },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding: 1,\n\t\t\t\tresource: { buffer: nearest },\n\t\t\t},\n\t\t],\n\t})\n\tconst encoder = GPU.device.createCommandEncoder()\n\tconst compute = encoder.beginComputePass({})\n\tcompute.setPipeline(computePipeline)\n\tcompute.setBindGroup(0, group)\n\tcompute.dispatch(Math.ceil(length / 256))\n\tcompute.endPass()\n\tGPU.device.queue.submit([encoder.finish()])\n}\n","import * as GPU from './gpu'\nimport * as Module from './module'\n\nlet computePipeline: undefined | GPUComputePipeline = undefined\n\nexport async function Compute(\n\tcloud: GPUBuffer,\n\tnearest: GPUBuffer,\n\tcolors: GPUBuffer,\n\tk: number,\n\tlength: number,\n): Promise<void> {\n\tif (computePipeline == undefined) {\n\t\tcomputePipeline = GPU.device.createComputePipeline({\n\t\t\tcompute: {\n\t\t\t\tmodule: Module.New(await (await fetch('compute/edge.wgsl')).text()),\n\t\t\t\tentryPoint: 'main',\n\t\t\t},\n\t\t})\n\t}\n\tconst param = new Uint32Array([length, k])\n\tconst buffer = GPU.CreateBuffer(param, GPUBufferUsage.STORAGE)\n\tconst group = GPU.device.createBindGroup({\n\t\tlayout: computePipeline.getBindGroupLayout(0),\n\t\tentries: [\n\t\t\t{\n\t\t\t\tbinding: 0,\n\t\t\t\tresource: { buffer: buffer },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding: 1,\n\t\t\t\tresource: { buffer: cloud },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding: 2,\n\t\t\t\tresource: { buffer: nearest },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding: 3,\n\t\t\t\tresource: { buffer: colors },\n\t\t\t},\n\t\t],\n\t})\n\tconst encoder = GPU.device.createCommandEncoder()\n\tconst compute = encoder.beginComputePass({})\n\tcompute.setPipeline(computePipeline)\n\tcompute.setBindGroup(0, group)\n\tcompute.dispatch(Math.ceil(length / 256))\n\tcompute.endPass()\n\tGPU.device.queue.submit([encoder.finish()])\n}\n","import * as GPU from './gpu'\nimport * as Module from './module'\n\nlet computePipeline: undefined | GPUComputePipeline = undefined\n\nexport async function Compute(\n\tcloud: GPUBuffer,\n\tnearest: GPUBuffer,\n\tcolors: GPUBuffer,\n\tk: number,\n\tlength: number,\n): Promise<void> {\n\tif (computePipeline == undefined) {\n\t\tcomputePipeline = GPU.device.createComputePipeline({\n\t\t\tcompute: {\n\t\t\t\tmodule: Module.New(await (await fetch('compute/edgeOld.wgsl')).text()),\n\t\t\t\tentryPoint: 'main',\n\t\t\t},\n\t\t})\n\t}\n\tconst param = new Uint32Array([length, k])\n\tconst buffer = GPU.CreateBuffer(param, GPUBufferUsage.STORAGE)\n\tconst group = GPU.device.createBindGroup({\n\t\tlayout: computePipeline.getBindGroupLayout(0),\n\t\tentries: [\n\t\t\t{\n\t\t\t\tbinding: 0,\n\t\t\t\tresource: { buffer: buffer },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding: 1,\n\t\t\t\tresource: { buffer: cloud },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding: 2,\n\t\t\t\tresource: { buffer: nearest },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbinding: 3,\n\t\t\t\tresource: { buffer: colors },\n\t\t\t},\n\t\t],\n\t})\n\tconst encoder = GPU.device.createCommandEncoder()\n\tconst compute = encoder.beginComputePass({})\n\tcompute.setPipeline(computePipeline)\n\tcompute.setBindGroup(0, group)\n\tcompute.dispatch(Math.ceil(length / 256))\n\tcompute.endPass()\n\tGPU.device.queue.submit([encoder.finish()])\n}\n","import * as GPU from '../gpu/gpu'\n\nexport function CreateColors(points: number): GPUBuffer {\n\tconst colors = new Float32Array(points * 4)\n\n\tfor (let i = 0; i < points; i++) {\n\t\tcolors[i * 4 + 0] = 0.3 + 0.7 * Math.random()\n\t\tcolors[i * 4 + 1] = 0.3 + 0.7 * Math.random()\n\t\tcolors[i * 4 + 2] = 0.3 + 0.7 * Math.random()\n\t}\n\n\treturn GPU.CreateBuffer(colors, GPUBufferUsage.VERTEX | GPUBufferUsage.STORAGE)\n}\n","import * as GPU from '../gpu/gpu'\n\nexport function CreateGrid(amount: number): {\n\tlength: number\n\tpositions: GPUBuffer\n\tcolors: GPUBuffer\n} {\n\tconst positions = new Float32Array((amount * 4 + 3) * 8)\n\tconst colors = new Float32Array((amount * 4 + 3) * 8)\n\ttype vec = { x: number; y: number; z: number }\n\tconst addLine = (\n\t\tidx: number,\n\t\tstart: vec,\n\t\tend: vec,\n\t\tcolor: vec,\n\t\tendColor: vec | undefined = undefined,\n\t) => {\n\t\tif (endColor == undefined) {\n\t\t\tendColor = color\n\t\t}\n\t\tidx *= 8\n\t\tpositions[idx + 0] = start.x\n\t\tpositions[idx + 1] = start.y\n\t\tpositions[idx + 2] = start.z\n\t\tcolors[idx + 0] = color.x\n\t\tcolors[idx + 1] = color.y\n\t\tcolors[idx + 2] = color.z\n\n\t\tpositions[idx + 4] = end.x\n\t\tpositions[idx + 5] = end.y\n\t\tpositions[idx + 6] = end.z\n\t\tcolors[idx + 4] = endColor.x\n\t\tcolors[idx + 5] = endColor.y\n\t\tcolors[idx + 6] = endColor.z\n\t}\n\tfor (let i = -amount; i <= amount; i++) {\n\t\tif (i == 0) {\n\t\t\tcontinue\n\t\t}\n\t\tlet idx: number\n\t\tif (i < 0) {\n\t\t\tidx = i\n\t\t} else if (i == 0) {\n\t\t\tcontinue\n\t\t} else {\n\t\t\tidx = i - 1\n\t\t}\n\t\taddLine(\n\t\t\tamount * 1 + idx,\n\t\t\t{ x: i, y: 0, z: amount },\n\t\t\t{ x: i, y: 0, z: -amount },\n\t\t\t{ x: 1, y: 1, z: 1 },\n\t\t)\n\t\taddLine(\n\t\t\tamount * 3 + idx,\n\t\t\t{ x: amount, y: 0, z: i },\n\t\t\t{ x: -amount, y: 0, z: i },\n\t\t\t{ x: 1, y: 1, z: 1 },\n\t\t)\n\t}\n\t//3 main axes\n\taddLine(\n\t\tamount * 4 + 0,\n\t\t{ x: -amount, y: 0, z: 0 },\n\t\t{ x: amount, y: 0, z: 0 },\n\t\t{ x: 1, y: 1, z: 1 },\n\t\t{ x: 1, y: 0, z: 0 },\n\t)\n\taddLine(\n\t\tamount * 4 + 1,\n\t\t{ x: 0, y: -amount, z: 0 },\n\t\t{ x: 0, y: amount, z: 0 },\n\t\t{ x: 1, y: 1, z: 1 },\n\t\t{ x: 0, y: 1, z: 0 },\n\t)\n\taddLine(\n\t\tamount * 4 + 2,\n\t\t{ x: 0, y: 0, z: -amount },\n\t\t{ x: 0, y: 0, z: amount },\n\t\t{ x: 1, y: 1, z: 1 },\n\t\t{ x: 0, y: 0, z: 1 },\n\t)\n\treturn {\n\t\tlength: (amount * 4 + 3) * 2,\n\t\tpositions: GPU.CreateBuffer(positions, GPUBufferUsage.VERTEX | GPUBufferUsage.STORAGE),\n\t\tcolors: GPU.CreateBuffer(colors, GPUBufferUsage.VERTEX | GPUBufferUsage.STORAGE),\n\t}\n}\n","import * as GPU from '../gpu/gpu'\n\nexport function CreateSphere(points: number): GPUBuffer {\n\tconst vertices = new Float32Array(points * 4)\n\n\tfor (let i = 0; i < points; i++) {\n\t\tconst long = Math.acos(Math.random() * 2 - 1) //less points near the poles\n\t\tconst lat = Math.random() * 2 * Math.PI\n\n\t\tvertices[i * 4 + 0] = Math.sin(lat) * Math.sin(long)\n\t\tvertices[i * 4 + 1] = Math.cos(long)\n\t\tvertices[i * 4 + 2] = Math.cos(lat) * Math.sin(long)\n\t}\n\n\treturn GPU.CreateBuffer(vertices, GPUBufferUsage.VERTEX | GPUBufferUsage.STORAGE)\n}\n","//https://gitlab.com/taketwo/three-pcd-loader/-/blob/master/decompress-lzf.js //edited\nexport function LZF(inData: Uint8Array, outLength: number): Uint8Array {\n\tconst inLength = inData.length\n\tconst outData = new Uint8Array(outLength)\n\tlet inPtr = 0\n\tlet outPtr = 0\n\tdo {\n\t\tlet ctrl = inData[inPtr++]\n\t\tif (ctrl < 1 << 5) {\n\t\t\tctrl++\n\t\t\tif (outPtr + ctrl > outLength) throw new Error('Output buffer is not large enough')\n\t\t\tif (inPtr + ctrl > inLength) throw new Error('Invalid compressed data')\n\t\t\tdo {\n\t\t\t\toutData[outPtr++] = inData[inPtr++]\n\t\t\t} while (--ctrl)\n\t\t} else {\n\t\t\tlet len = ctrl >> 5\n\t\t\tlet ref = outPtr - ((ctrl & 0x1f) << 8) - 1\n\t\t\tif (inPtr >= inLength) throw new Error('Invalid compressed data')\n\t\t\tif (len === 7) {\n\t\t\t\tlen += inData[inPtr++]\n\t\t\t\tif (inPtr >= inLength) throw new Error('Invalid compressed data')\n\t\t\t}\n\t\t\tref -= inData[inPtr++]\n\t\t\tif (outPtr + len + 2 > outLength) throw new Error('Output buffer is not large enough')\n\t\t\tif (ref < 0) throw new Error('Invalid compressed data')\n\t\t\tif (ref >= outPtr) throw new Error('Invalid compressed data')\n\t\t\tdo {\n\t\t\t\toutData[outPtr++] = outData[ref++]\n\t\t\t} while (--len + 2)\n\t\t}\n\t} while (inPtr < inLength)\n\treturn outData\n}\n","//https://gitlab.com/taketwo/three-pcd-loader/-/blob/master/pcd-loader.js //edited\nimport * as Decompress from './decompress'\nimport * as GPU from '../gpu/gpu'\n\n/**\n * @author Filipe Caixeta / http://filipecaixeta.com.br\n * @author Sergey Alexandrov\n *\n * Description: A THREE loader for PCD files.\n *\n * Based on the example THREE.PCDLoader written by Filipe Caixeta.\n *\n * Changes:\n *\n *   - added support for compressed binary files\n *   - significantly improved header parsing time\n *   - added support for RGBA color field\n *   - removed support for normals field\n *\n */\n\nconst littleEndian = true\n\nexport function CreatePCD(data: ArrayBufferLike): [GPUBuffer, number] | undefined {\n\tconst header = parseHeader(data)\n\tif (header == null) {\n\t\treturn undefined\n\t}\n\tconst offset = header.offset\n\tlet position: Float32Array | undefined = undefined\n\tif (offset.x !== undefined && offset.y !== undefined && offset.z !== undefined) {\n\t\tposition = new Float32Array(header.points * 4)\n\t}\n\n\tlet color: Float32Array | undefined = undefined\n\tlet color_offset: number = undefined as any\n\tif (offset.rgb !== undefined || offset.rgba !== undefined) {\n\t\tcolor = new Float32Array(header.points * 4)\n\t\tcolor_offset = offset.rgb === undefined ? offset.rgba : offset.rgb\n\t}\n\n\tif (header.data === 'ascii') {\n\t\tconst charArrayView = new Uint8Array(data)\n\t\tlet dataString = ''\n\t\tfor (let j = header.headerLen; j < data.byteLength; j++) {\n\t\t\tdataString += String.fromCharCode(charArrayView[j])\n\t\t}\n\n\t\tconst lines = dataString.split('\\n')\n\t\tlet i3 = 0\n\t\tfor (let i = 0; i < lines.length; i++, i3 += 4) {\n\t\t\tconst line = lines[i].split(' ')\n\t\t\tif (position !== undefined) {\n\t\t\t\tposition[i3 + 0] = parseFloat(line[offset.x])\n\t\t\t\tposition[i3 + 1] = parseFloat(line[offset.y])\n\t\t\t\tposition[i3 + 2] = parseFloat(line[offset.z])\n\t\t\t}\n\t\t\tif (color !== undefined) {\n\t\t\t\tlet c: Uint32Array | Float32Array = undefined as any\n\t\t\t\tif (offset.rgba !== undefined) {\n\t\t\t\t\tc = new Uint32Array([parseInt(line[offset.rgba])])\n\t\t\t\t} else if (offset.rgb !== undefined) {\n\t\t\t\t\tc = new Float32Array([parseFloat(line[offset.rgb])])\n\t\t\t\t}\n\t\t\t\tconst dataview = new Uint8Array(c.buffer, 0)\n\t\t\t\tcolor[i3 + 2] = dataview[0] / 255.0\n\t\t\t\tcolor[i3 + 1] = dataview[1] / 255.0\n\t\t\t\tcolor[i3 + 0] = dataview[2] / 255.0\n\t\t\t}\n\t\t}\n\t} else if (header.data === 'binary') {\n\t\tlet row = 0\n\t\tconst dataArrayView = new DataView(data, header.headerLen)\n\t\tfor (let p = 0; p < header.points; row += header.rowSize, p++) {\n\t\t\tif (position !== undefined) {\n\t\t\t\tposition[p * 4 + 0] = dataArrayView.getFloat32(row + offset.x, littleEndian)\n\t\t\t\tposition[p * 4 + 1] = dataArrayView.getFloat32(row + offset.y, littleEndian)\n\t\t\t\tposition[p * 4 + 2] = dataArrayView.getFloat32(row + offset.z, littleEndian)\n\t\t\t}\n\t\t\tif (color !== undefined) {\n\t\t\t\tcolor[p * 4 + 2] = dataArrayView.getUint8(row + color_offset + 0) / 255.0\n\t\t\t\tcolor[p * 4 + 1] = dataArrayView.getUint8(row + color_offset + 1) / 255.0\n\t\t\t\tcolor[p * 4 + 0] = dataArrayView.getUint8(row + color_offset + 2) / 255.0\n\t\t\t}\n\t\t}\n\t} else if (header.data === 'binary_compressed') {\n\t\tconst sizes = new Uint32Array(data.slice(header.headerLen, header.headerLen + 8))\n\t\tconst compressedSize = sizes[0]\n\t\tconst decompressedSize = sizes[1]\n\t\tconst decompressed = Decompress.LZF(\n\t\t\tnew Uint8Array(data, header.headerLen + 8, compressedSize),\n\t\t\tdecompressedSize,\n\t\t)\n\t\tconst dataArrayView = new DataView(decompressed.buffer)\n\t\tfor (let p = 0; p < header.points; p++) {\n\t\t\tif (position !== undefined) {\n\t\t\t\tposition[p * 4 + 0] = dataArrayView.getFloat32(offset.x + p * 4, littleEndian)\n\t\t\t\tposition[p * 4 + 1] = dataArrayView.getFloat32(offset.y + p * 4, littleEndian)\n\t\t\t\tposition[p * 4 + 2] = dataArrayView.getFloat32(offset.z + p * 4, littleEndian)\n\t\t\t}\n\t\t\tif (color !== undefined) {\n\t\t\t\tcolor[p * 4 + 2] = dataArrayView.getUint8(color_offset + p * 4 + 0) / 255.0\n\t\t\t\tcolor[p * 4 + 1] = dataArrayView.getUint8(color_offset + p * 4 + 1) / 255.0\n\t\t\t\tcolor[p * 4 + 0] = dataArrayView.getUint8(color_offset + p * 4 + 2) / 255.0\n\t\t\t}\n\t\t}\n\t}\n\tif (position == undefined) {\n\t\treturn undefined\n\t}\n\treturn [\n\t\tGPU.CreateBuffer(position, GPUBufferUsage.VERTEX | GPUBufferUsage.STORAGE),\n\t\theader.points,\n\t]\n}\n\ntype Header = {\n\tdata: string\n\theaderLen: number\n\tstr: string\n\tversion: number\n\tfields: string[]\n\tsize: number[]\n\ttype: string[]\n\tcount: number[]\n\twidth: number\n\theight: number\n\tviewpoint: string\n\tpoints: number\n\toffset: { [key: string]: number }\n\trowSize: number\n}\n\nfunction parseHeader(binaryData: ArrayBufferLike): Header | null {\n\tlet headerText = ''\n\tconst charArray = new Uint8Array(binaryData)\n\tlet i = 0\n\tconst max = charArray.length\n\twhile (i < max && headerText.search(/[\\r\\n]DATA\\s(\\S*)\\s/i) === -1) {\n\t\theaderText += String.fromCharCode(charArray[i++])\n\t}\n\tconst result1 = headerText.search(/[\\r\\n]DATA\\s(\\S*)\\s/i)\n\tconst result2 = /[\\r\\n]DATA\\s(\\S*)\\s/i.exec(headerText.substr(result1 - 1))\n\tif (result1 == undefined || result2 == undefined) {\n\t\treturn null\n\t}\n\n\tconst header = {} as Header\n\theader.data = result2[1]\n\theader.headerLen = result2[0].length + result1\n\theader.str = headerText.substr(0, header.headerLen)\n\n\t// Remove comments\n\theader.str = header.str.replace(/#.*/gi, '')\n\tconst version = /VERSION (.*)/i.exec(header.str)\n\tif (version !== null) {\n\t\theader.version = parseFloat(version[1])\n\t}\n\tconst fields = /FIELDS (.*)/i.exec(header.str)\n\tif (fields !== null) {\n\t\theader.fields = fields[1].split(' ')\n\t}\n\tconst size = /SIZE (.*)/i.exec(header.str)\n\tif (size !== null) {\n\t\theader.size = size[1].split(' ').map(function (x) {\n\t\t\treturn parseInt(x, 10)\n\t\t})\n\t}\n\tconst type = /TYPE (.*)/i.exec(header.str)\n\tif (type !== null) {\n\t\theader.type = type[1].split(' ')\n\t}\n\tconst count = /COUNT (.*)/i.exec(header.str)\n\tif (count !== null) {\n\t\theader.count = count[1].split(' ').map(function (x) {\n\t\t\treturn parseInt(x, 10)\n\t\t})\n\t}\n\tconst width = /WIDTH (.*)/i.exec(header.str)\n\tif (width !== null) {\n\t\theader.width = parseInt(width[1])\n\t}\n\tconst height = /HEIGHT (.*)/i.exec(header.str)\n\tif (height !== null) {\n\t\theader.height = parseInt(height[1])\n\t}\n\tconst viewpoint = /VIEWPOINT (.*)/i.exec(header.str)\n\tif (viewpoint !== null) {\n\t\theader.viewpoint = viewpoint[1]\n\t}\n\tconst points = /POINTS (.*)/i.exec(header.str)\n\tif (points !== null) {\n\t\theader.points = parseInt(points[1], 10)\n\t}\n\tif (header.points === null) {\n\t\theader.points = header.width * header.height\n\t}\n\tif (header.count == undefined) {\n\t\theader.count = []\n\t\tfor (i = 0; i < header.fields.length; i++) {\n\t\t\theader.count.push(1)\n\t\t}\n\t}\n\theader.offset = {}\n\tlet sizeSum = 0\n\tfor (let j = 0; j < header.fields.length; j++) {\n\t\tif (header.data === 'ascii') {\n\t\t\theader.offset[header.fields[j]] = j\n\t\t} else if (header.data === 'binary') {\n\t\t\theader.offset[header.fields[j]] = sizeSum\n\t\t\tsizeSum += header.size[j]\n\t\t} else if (header.data === 'binary_compressed') {\n\t\t\theader.offset[header.fields[j]] = sizeSum\n\t\t\tsizeSum += header.size[j] * header.points\n\t\t}\n\t}\n\t// For binary only\n\theader.rowSize = sizeSum\n\treturn header\n}\n","import * as GPU from './gpu/gpu'\nimport * as Lines from './gpu/lines'\nimport { Position } from './gpu/position'\nimport { Camera } from './gpu/camera'\nimport { CreateCube } from './loader/cube'\nimport * as Cloud from './gpu/cloud'\nimport * as KNearest from './gpu/kNearest'\nimport * as Triangulate from './gpu/triangulate'\nimport * as Filter from './gpu/filter'\nimport * as Edge from './gpu/edge'\nimport * as EdgeOld from './gpu/edgeOld'\nimport { CreateColors } from './loader/color'\nimport { CreateGrid } from './loader/grid'\nimport { CreateSphere } from './loader/sphere'\nimport { CreatePCD } from './loader/pcd'\n\ndocument.body.onload = async () => {\n\tconst display = document.getElementById('display') as HTMLDivElement\n\tconst canvas = await GPU.Setup(display.clientWidth, display.clientHeight)\n\tif (canvas == undefined) {\n\t\tdisplay.remove()\n\t\tconst error = document.createElement('div')\n\t\terror.className = 'error'\n\t\tconst topLine = document.createElement('div')\n\t\ttopLine.className = 'large'\n\t\ttopLine.innerHTML = 'WebGPU not available'\n\t\terror.append(topLine)\n\t\tconst botLine = document.createElement('div')\n\t\tbotLine.className = 'normal'\n\t\tbotLine.innerHTML =\n\t\t\t'Only tested with <a href=\"https://www.google.com/chrome\">Google Chrome</a>'\n\t\terror.append(botLine)\n\t\tdocument.body.append(error)\n\t\treturn\n\t}\n\tdisplay.append(canvas)\n\n\tconst cam = new Camera(Math.PI / 4)\n\tcam.Translate(0, 5, 30)\n\n\tconst increase = new Position()\n\tincrease.Scale(5, 5, 5)\n\tconst normal = new Position()\n\n\tlet k = 64\n\tlet kOld = k\n\tlet length = 50_000\n\tlet lengthOld = length\n\tlet form: 'cube' | 'sphere' | 'bunny' | 'test' = 'sphere'\n\tlet cloud = CreateSphere(length)\n\tlet colors = CreateColors(length)\n\n\tconst grid = CreateGrid(10)\n\n\tdisplay.onwheel = (ev) => {\n\t\tconst scale = 1 + ev.deltaY / 1000\n\t\tif (ev.ctrlKey == false) {\n\t\t\tincrease.Scale(scale, scale, scale)\n\t\t} else {\n\t\t\tlet fov = cam.fieldOfView * scale\n\t\t\tif (fov < Math.PI / 10) {\n\t\t\t\tfov = Math.PI / 10\n\t\t\t}\n\t\t\tif (fov > (Math.PI * 9) / 10) {\n\t\t\t\tfov = (Math.PI * 9) / 10\n\t\t\t}\n\t\t\tcam.fieldOfView = fov\n\t\t}\n\t\tev.preventDefault()\n\t\tev.stopImmediatePropagation()\n\t}\n\n\tdocument.body.onresize = () => {\n\t\tGPU.Resize(display.clientWidth, display.clientHeight)\n\t\tcam.UpdateSize()\n\t}\n\n\tconst keys: { [key: string]: true | undefined } = {}\n\tlet nearest: undefined | GPUBuffer = undefined\n\tdocument.body.onkeydown = async (ev) => {\n\t\tkeys[ev.code] = true\n\t\tswitch (ev.code) {\n\t\tcase 'KeyH':\n\t\t\tmakeHint(\n\t\t\t\t'Left mouse button: rotate camera',\n\t\t\t\t'Mouse wheel: change cloud size',\n\t\t\t\t'Mouse wheel + Control: change field of view',\n\t\t\t\t'QWER: move camera',\n\t\t\t\t'1: change cloud form',\n\t\t\t\t'1 + Control: change cloud size for sphere and cube',\n\t\t\t\t'2: compute k nearest points',\n\t\t\t\t'2 + Control: change k',\n\t\t\t\t'3: compute triangulation',\n\t\t\t\t'4: approximate normal (best with triangulation)',\n\t\t\t\t'4 + Control: approximate normal (best with k-nearest)',\n\t\t\t\t'Space: render connections with polygons',\n\t\t\t\t'0: open notes (german)',\n\t\t\t)\n\t\t\tbreak\n\t\tcase 'Digit1':\n\t\t\tif (ev.ctrlKey) {\n\t\t\t\tconst number = getUserNumber('input new cloud size')\n\t\t\t\tif (number != undefined) {\n\t\t\t\t\tlengthOld = number\n\t\t\t\t\tform = 'test'\n\t\t\t\t} else {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tcloud.destroy()\n\t\t\tcolors.destroy()\n\t\t\tswitch (form) {\n\t\t\tcase 'sphere':\n\t\t\t\tlength = lengthOld\n\t\t\t\tcloud = CreateCube(length)\n\t\t\t\tform = 'cube'\n\t\t\t\tbreak\n\t\t\tcase 'cube': {\n\t\t\t\tconst response = await fetch('pcd/bunny.pcd')\n\t\t\t\tconst content = await (await response.blob()).arrayBuffer()\n\t\t\t\tconst result = CreatePCD(content)\n\t\t\t\tif (result != undefined) {\n\t\t\t\t\t[cloud, length] = result\n\t\t\t\t} else {\n\t\t\t\t\talert('pcd error')\n\t\t\t\t}\n\t\t\t\tform = 'bunny'\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'bunny': {\n\t\t\t\tconst response = await fetch('pcd/rops_cloud.pcd')\n\t\t\t\tconst content = await (await response.blob()).arrayBuffer()\n\t\t\t\tconst result = CreatePCD(content)\n\t\t\t\tif (result != undefined) {\n\t\t\t\t\t[cloud, length] = result\n\t\t\t\t} else {\n\t\t\t\t\talert('pcd error')\n\t\t\t\t}\n\t\t\t\tform = 'test'\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'test':\n\t\t\t\tlength = lengthOld\n\t\t\t\tcloud = CreateSphere(length)\n\t\t\t\tform = 'sphere'\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcolors = CreateColors(length)\n\t\t\tif (nearest != undefined) {\n\t\t\t\tnearest.destroy()\n\t\t\t\tnearest = undefined\n\t\t\t}\n\t\t\tbreak\n\t\tcase 'Digit2':\n\t\t\tif (ev.ctrlKey) {\n\t\t\t\tconst number = getUserNumber('input new k for nearest points')\n\t\t\t\tif (number != undefined) {\n\t\t\t\t\tkOld = number\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (nearest != undefined) {\n\t\t\t\tnearest.destroy()\n\t\t\t}\n\t\t\tk = kOld\n\t\t\tnearest = await KNearest.Compute(k, cloud, length)\n\t\t\tbreak\n\t\tcase 'Digit3':\n\t\t\tif (nearest != undefined) {\n\t\t\t\tnearest.destroy()\n\t\t\t}\n\t\t\tnearest = await Triangulate.Compute(cloud, length)\n\t\t\tk = Triangulate.K\n\t\t\tbreak\n\t\tcase 'Digit4':\n\t\t\tif (nearest == undefined) {\n\t\t\t\talert('please calculate the connections first')\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif (ev.ctrlKey == false) {\n\t\t\t\tawait Edge.Compute(cloud, nearest, colors, k, length)\n\t\t\t} else {\n\t\t\t\tawait EdgeOld.Compute(cloud, nearest, colors, k, length)\n\t\t\t}\n\t\t\tbreak\n\t\tcase 'Digit5':\n\t\t\tif (nearest == undefined) {\n\t\t\t\talert('please calculate the connections first')\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tawait Filter.Compute(nearest, k, length)\n\t\t\tbreak\n\t\tcase 'Digit0':\n\t\t\twindow.open('notes.html', '_blank')\n\t\t}\n\t}\n\n\tdocument.body.onkeyup = (ev) => {\n\t\tdelete keys[ev.code]\n\t}\n\tmakeHint('press \\'H\\' for help')\n\n\tdisplay.onmousemove = (ev) => {\n\t\tif ((ev.buttons & 1) != 0) {\n\t\t\tcam.RotateX(-ev.movementY / 200)\n\t\t\tcam.RotateGlobalY(-ev.movementX / 200)\n\t\t}\n\t}\n\n\tlet last: number\n\trequestAnimationFrame((time: number) => {\n\t\tlast = time\n\t})\n\n\tasync function Draw(time: number) {\n\t\tconst delta = time - last\n\t\tif (delta > 25) {\n\t\t\tconsole.log(delta)\n\t\t}\n\t\tconst dist = delta / 50\n\t\tconst move = (key: string, x: number, y: number, z: number) => {\n\t\t\tif (keys[key] != undefined) {\n\t\t\t\tcam.Translate(x * dist, y * dist, z * dist)\n\t\t\t}\n\t\t}\n\n\t\tmove('KeyW', 0, 0, -1)\n\t\tmove('KeyD', 1, 0, 0)\n\t\tmove('KeyS', 0, 0, 1)\n\t\tmove('KeyA', -1, 0, 0)\n\t\tmove('KeyF', 0, -1, 0)\n\t\tmove('KeyR', 0, 1, 0)\n\n\t\tGPU.StartRender(cam)\n\t\tawait Lines.Render(normal, grid.length, grid.positions, grid.colors)\n\t\tif (nearest != undefined) {\n\t\t\tif (keys['Space'] == undefined) {\n\t\t\t\tawait Cloud.Render(increase, 0.015, length, cloud, colors)\n\t\t\t\tawait KNearest.Render(increase, cloud, colors, nearest, k, length)\n\t\t\t} else {\n\t\t\t\tawait Triangulate.Render(increase, cloud, colors, nearest, k, length)\n\t\t\t}\n\t\t} else {\n\t\t\tawait Cloud.Render(increase, 0.015, length, cloud, colors)\n\t\t}\n\t\tGPU.FinishRender()\n\t\tlast = time\n\t\trequestAnimationFrame(Draw)\n\t}\n\trequestAnimationFrame(Draw)\n}\n\nfunction makeHint(...text: string[]): void {\n\tconst hint = document.createElement('div')\n\tlet combined = ''\n\tfor (let i = 0; i < text.length; i++) {\n\t\tcombined += text[i] + '\\n'\n\t}\n\thint.textContent = combined\n\thint.className = 'hint'\n\tdocument.body.append(hint)\n\tsetTimeout(() => {\n\t\thint.remove()\n\t}, 5000)\n}\n\nfunction getUserNumber(text: string): number | undefined {\n\tconst str = prompt(text)\n\tif (str == null) {\n\t\treturn undefined\n\t}\n\tconst x = parseInt(str)\n\tif (isNaN(x)) {\n\t\treturn undefined\n\t}\n\treturn x\n}\n"]}